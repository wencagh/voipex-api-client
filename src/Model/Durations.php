<?php
/**
 * Durations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * OpenAPI spec version: 1.98.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use \ArrayAccess;
use \Voipex\Ipbx\ObjectSerializer;

/**
 * Durations Class Doc Comment
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Durations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'durations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'incoming_calls' => 'float',
        'outgoing_calls' => 'float',
        'pauses' => 'float',
        'login' => 'float',
        'idle' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'incoming_calls' => null,
        'outgoing_calls' => null,
        'pauses' => null,
        'login' => null,
        'idle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'incoming_calls' => 'incomingCalls',
        'outgoing_calls' => 'outgoingCalls',
        'pauses' => 'pauses',
        'login' => 'login',
        'idle' => 'idle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'incoming_calls' => 'setIncomingCalls',
        'outgoing_calls' => 'setOutgoingCalls',
        'pauses' => 'setPauses',
        'login' => 'setLogin',
        'idle' => 'setIdle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'incoming_calls' => 'getIncomingCalls',
        'outgoing_calls' => 'getOutgoingCalls',
        'pauses' => 'getPauses',
        'login' => 'getLogin',
        'idle' => 'getIdle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['incoming_calls'] = isset($data['incoming_calls']) ? $data['incoming_calls'] : null;
        $this->container['outgoing_calls'] = isset($data['outgoing_calls']) ? $data['outgoing_calls'] : null;
        $this->container['pauses'] = isset($data['pauses']) ? $data['pauses'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['idle'] = isset($data['idle']) ? $data['idle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['incoming_calls'] === null) {
            $invalidProperties[] = "'incoming_calls' can't be null";
        }
        if ($this->container['outgoing_calls'] === null) {
            $invalidProperties[] = "'outgoing_calls' can't be null";
        }
        if ($this->container['pauses'] === null) {
            $invalidProperties[] = "'pauses' can't be null";
        }
        if ($this->container['login'] === null) {
            $invalidProperties[] = "'login' can't be null";
        }
        if ($this->container['idle'] === null) {
            $invalidProperties[] = "'idle' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets incoming_calls
     *
     * @return float
     */
    public function getIncomingCalls()
    {
        return $this->container['incoming_calls'];
    }

    /**
     * Sets incoming_calls
     *
     * @param float $incoming_calls Incoming calls in seconds
     *
     * @return $this
     */
    public function setIncomingCalls($incoming_calls)
    {
        $this->container['incoming_calls'] = $incoming_calls;

        return $this;
    }

    /**
     * Gets outgoing_calls
     *
     * @return float
     */
    public function getOutgoingCalls()
    {
        return $this->container['outgoing_calls'];
    }

    /**
     * Sets outgoing_calls
     *
     * @param float $outgoing_calls Outgoing calls in seconds
     *
     * @return $this
     */
    public function setOutgoingCalls($outgoing_calls)
    {
        $this->container['outgoing_calls'] = $outgoing_calls;

        return $this;
    }

    /**
     * Gets pauses
     *
     * @return float
     */
    public function getPauses()
    {
        return $this->container['pauses'];
    }

    /**
     * Sets pauses
     *
     * @param float $pauses Pauses time in seconds
     *
     * @return $this
     */
    public function setPauses($pauses)
    {
        $this->container['pauses'] = $pauses;

        return $this;
    }

    /**
     * Gets login
     *
     * @return float
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param float $login Login time in seconds
     *
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets idle
     *
     * @return float
     */
    public function getIdle()
    {
        return $this->container['idle'];
    }

    /**
     * Sets idle
     *
     * @param float $idle Idle time in seconds
     *
     * @return $this
     */
    public function setIdle($idle)
    {
        $this->container['idle'] = $idle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
