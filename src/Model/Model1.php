<?php
/**
 * Model1
 *
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Voipex\Ipbx\ObjectSerializer;

/**
 * Model1 Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Model1 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Model1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'user_id' => '\Voipex\Ipbx\Model\Model1UserId',
        'line' => '\Voipex\Ipbx\Model\Model1Line',
        'calldate' => '\DateTime',
        'clid' => 'string',
        'src' => 'string',
        'dst' => 'string',
        'duration' => 'float',
        'billsec' => 'float',
        'disposition' => 'string',
        'accountcode' => 'string',
        'userfield' => 'string',
        'filename' => 'string',
        'way' => '\Voipex\Ipbx\Model\Way',
        'trunk' => 'string',
        'hangupcause' => 'string',
        'uniqueid' => 'string',
        'linkedid' => 'string',
        'organization' => 'string',
        'organization_person' => 'string',
        'data' => 'string',
        'sipcallid' => 'string',
        'stamp' => '\DateTime',
        'cc_cb' => 'float',
        'queue' => 'string',
        'note' => 'string',
        'categories' => 'string[]',
        'phone_number' => 'string',
        'user' => '\Voipex\Ipbx\Model\User',
        'end_time' => '\DateTime',
        'user_answered' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'user_id' => null,
        'line' => null,
        'calldate' => 'date',
        'clid' => null,
        'src' => null,
        'dst' => null,
        'duration' => null,
        'billsec' => null,
        'disposition' => null,
        'accountcode' => null,
        'userfield' => null,
        'filename' => null,
        'way' => null,
        'trunk' => null,
        'hangupcause' => null,
        'uniqueid' => null,
        'linkedid' => null,
        'organization' => null,
        'organization_person' => null,
        'data' => null,
        'sipcallid' => null,
        'stamp' => 'date',
        'cc_cb' => null,
        'queue' => null,
        'note' => null,
        'categories' => null,
        'phone_number' => null,
        'user' => null,
        'end_time' => 'date',
        'user_answered' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'user_id' => true,
        'line' => false,
        'calldate' => false,
        'clid' => false,
        'src' => false,
        'dst' => false,
        'duration' => false,
        'billsec' => false,
        'disposition' => false,
        'accountcode' => false,
        'userfield' => false,
        'filename' => false,
        'way' => false,
        'trunk' => false,
        'hangupcause' => false,
        'uniqueid' => false,
        'linkedid' => false,
        'organization' => false,
        'organization_person' => false,
        'data' => false,
        'sipcallid' => false,
        'stamp' => false,
        'cc_cb' => true,
        'queue' => true,
        'note' => true,
        'categories' => false,
        'phone_number' => false,
        'user' => true,
        'end_time' => false,
        'user_answered' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'user_id' => 'user_id',
        'line' => 'line',
        'calldate' => 'calldate',
        'clid' => 'clid',
        'src' => 'src',
        'dst' => 'dst',
        'duration' => 'duration',
        'billsec' => 'billsec',
        'disposition' => 'disposition',
        'accountcode' => 'accountcode',
        'userfield' => 'userfield',
        'filename' => 'filename',
        'way' => 'way',
        'trunk' => 'trunk',
        'hangupcause' => 'hangupcause',
        'uniqueid' => 'uniqueid',
        'linkedid' => 'linkedid',
        'organization' => 'organization',
        'organization_person' => 'organizationPerson',
        'data' => 'data',
        'sipcallid' => 'sipcallid',
        'stamp' => 'stamp',
        'cc_cb' => 'cc_cb',
        'queue' => 'queue',
        'note' => 'note',
        'categories' => 'categories',
        'phone_number' => 'phoneNumber',
        'user' => 'user',
        'end_time' => 'endTime',
        'user_answered' => 'userAnswered'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'user_id' => 'setUserId',
        'line' => 'setLine',
        'calldate' => 'setCalldate',
        'clid' => 'setClid',
        'src' => 'setSrc',
        'dst' => 'setDst',
        'duration' => 'setDuration',
        'billsec' => 'setBillsec',
        'disposition' => 'setDisposition',
        'accountcode' => 'setAccountcode',
        'userfield' => 'setUserfield',
        'filename' => 'setFilename',
        'way' => 'setWay',
        'trunk' => 'setTrunk',
        'hangupcause' => 'setHangupcause',
        'uniqueid' => 'setUniqueid',
        'linkedid' => 'setLinkedid',
        'organization' => 'setOrganization',
        'organization_person' => 'setOrganizationPerson',
        'data' => 'setData',
        'sipcallid' => 'setSipcallid',
        'stamp' => 'setStamp',
        'cc_cb' => 'setCcCb',
        'queue' => 'setQueue',
        'note' => 'setNote',
        'categories' => 'setCategories',
        'phone_number' => 'setPhoneNumber',
        'user' => 'setUser',
        'end_time' => 'setEndTime',
        'user_answered' => 'setUserAnswered'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'user_id' => 'getUserId',
        'line' => 'getLine',
        'calldate' => 'getCalldate',
        'clid' => 'getClid',
        'src' => 'getSrc',
        'dst' => 'getDst',
        'duration' => 'getDuration',
        'billsec' => 'getBillsec',
        'disposition' => 'getDisposition',
        'accountcode' => 'getAccountcode',
        'userfield' => 'getUserfield',
        'filename' => 'getFilename',
        'way' => 'getWay',
        'trunk' => 'getTrunk',
        'hangupcause' => 'getHangupcause',
        'uniqueid' => 'getUniqueid',
        'linkedid' => 'getLinkedid',
        'organization' => 'getOrganization',
        'organization_person' => 'getOrganizationPerson',
        'data' => 'getData',
        'sipcallid' => 'getSipcallid',
        'stamp' => 'getStamp',
        'cc_cb' => 'getCcCb',
        'queue' => 'getQueue',
        'note' => 'getNote',
        'categories' => 'getCategories',
        'phone_number' => 'getPhoneNumber',
        'user' => 'getUser',
        'end_time' => 'getEndTime',
        'user_answered' => 'getUserAnswered'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('line', $data ?? [], null);
        $this->setIfExists('calldate', $data ?? [], null);
        $this->setIfExists('clid', $data ?? [], null);
        $this->setIfExists('src', $data ?? [], null);
        $this->setIfExists('dst', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('billsec', $data ?? [], null);
        $this->setIfExists('disposition', $data ?? [], null);
        $this->setIfExists('accountcode', $data ?? [], null);
        $this->setIfExists('userfield', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('way', $data ?? [], null);
        $this->setIfExists('trunk', $data ?? [], null);
        $this->setIfExists('hangupcause', $data ?? [], null);
        $this->setIfExists('uniqueid', $data ?? [], null);
        $this->setIfExists('linkedid', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('organization_person', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('sipcallid', $data ?? [], null);
        $this->setIfExists('stamp', $data ?? [], null);
        $this->setIfExists('cc_cb', $data ?? [], null);
        $this->setIfExists('queue', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('user_answered', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['line'] === null) {
            $invalidProperties[] = "'line' can't be null";
        }
        if ($this->container['calldate'] === null) {
            $invalidProperties[] = "'calldate' can't be null";
        }
        if ($this->container['src'] === null) {
            $invalidProperties[] = "'src' can't be null";
        }
        if ($this->container['dst'] === null) {
            $invalidProperties[] = "'dst' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['billsec'] === null) {
            $invalidProperties[] = "'billsec' can't be null";
        }
        if ($this->container['disposition'] === null) {
            $invalidProperties[] = "'disposition' can't be null";
        }
        if ($this->container['way'] === null) {
            $invalidProperties[] = "'way' can't be null";
        }
        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['stamp'] === null) {
            $invalidProperties[] = "'stamp' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['user_answered'] === null) {
            $invalidProperties[] = "'user_answered' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return \Voipex\Ipbx\Model\Model1UserId
     */
    public function getUserId(): ?\Voipex\Ipbx\Model\Model1UserId
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param \Voipex\Ipbx\Model\Model1UserId $user_id user_id
     *
     * @return $this
     */
    public function setUserId(?\Voipex\Ipbx\Model\Model1UserId $user_id): static
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets line
     *
     * @return \Voipex\Ipbx\Model\Model1Line
     */
    public function getLine(): \Voipex\Ipbx\Model\Model1Line
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param \Voipex\Ipbx\Model\Model1Line $line line
     *
     * @return $this
     */
    public function setLine(\Voipex\Ipbx\Model\Model1Line $line): static
    {
        if (is_null($line)) {
            throw new InvalidArgumentException('non-nullable line cannot be null');
        }
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets calldate
     *
     * @return \DateTime
     */
    public function getCalldate(): \DateTime
    {
        return $this->container['calldate'];
    }

    /**
     * Sets calldate
     *
     * @param \DateTime $calldate calldate
     *
     * @return $this
     */
    public function setCalldate(\DateTime $calldate): static
    {
        if (is_null($calldate)) {
            throw new InvalidArgumentException('non-nullable calldate cannot be null');
        }
        $this->container['calldate'] = $calldate;

        return $this;
    }

    /**
     * Gets clid
     *
     * @return string|null
     */
    public function getClid(): ?string
    {
        return $this->container['clid'];
    }

    /**
     * Sets clid
     *
     * @param string|null $clid clid
     *
     * @return $this
     */
    public function setClid(?string $clid): static
    {
        if (is_null($clid)) {
            throw new InvalidArgumentException('non-nullable clid cannot be null');
        }
        $this->container['clid'] = $clid;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string
     */
    public function getSrc(): string
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string $src src
     *
     * @return $this
     */
    public function setSrc(string $src): static
    {
        if (is_null($src)) {
            throw new InvalidArgumentException('non-nullable src cannot be null');
        }
        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return string
     */
    public function getDst(): string
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param string $dst dst
     *
     * @return $this
     */
    public function setDst(string $dst): static
    {
        if (is_null($dst)) {
            throw new InvalidArgumentException('non-nullable dst cannot be null');
        }
        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration(): float
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration duration
     *
     * @return $this
     */
    public function setDuration(float $duration): static
    {
        if (is_null($duration)) {
            throw new InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets billsec
     *
     * @return float
     */
    public function getBillsec(): float
    {
        return $this->container['billsec'];
    }

    /**
     * Sets billsec
     *
     * @param float $billsec billsec
     *
     * @return $this
     */
    public function setBillsec(float $billsec): static
    {
        if (is_null($billsec)) {
            throw new InvalidArgumentException('non-nullable billsec cannot be null');
        }
        $this->container['billsec'] = $billsec;

        return $this;
    }

    /**
     * Gets disposition
     *
     * @return string
     */
    public function getDisposition(): string
    {
        return $this->container['disposition'];
    }

    /**
     * Sets disposition
     *
     * @param string $disposition asterisk hangup cause
     *
     * @return $this
     */
    public function setDisposition(string $disposition): static
    {
        if (is_null($disposition)) {
            throw new InvalidArgumentException('non-nullable disposition cannot be null');
        }
        $this->container['disposition'] = $disposition;

        return $this;
    }

    /**
     * Gets accountcode
     *
     * @return string|null
     */
    public function getAccountcode(): ?string
    {
        return $this->container['accountcode'];
    }

    /**
     * Sets accountcode
     *
     * @param string|null $accountcode accountcode
     *
     * @return $this
     */
    public function setAccountcode(?string $accountcode): static
    {
        if (is_null($accountcode)) {
            throw new InvalidArgumentException('non-nullable accountcode cannot be null');
        }
        $this->container['accountcode'] = $accountcode;

        return $this;
    }

    /**
     * Gets userfield
     *
     * @return string|null
     */
    public function getUserfield(): ?string
    {
        return $this->container['userfield'];
    }

    /**
     * Sets userfield
     *
     * @param string|null $userfield custom data
     *
     * @return $this
     */
    public function setUserfield(?string $userfield): static
    {
        if (is_null($userfield)) {
            throw new InvalidArgumentException('non-nullable userfield cannot be null');
        }
        $this->container['userfield'] = $userfield;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename(): ?string
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename name of call recording
     *
     * @return $this
     */
    public function setFilename(?string $filename): static
    {
        if (is_null($filename)) {
            throw new InvalidArgumentException('non-nullable filename cannot be null');
        }
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets way
     *
     * @return \Voipex\Ipbx\Model\Way
     */
    public function getWay(): \Voipex\Ipbx\Model\Way
    {
        return $this->container['way'];
    }

    /**
     * Sets way
     *
     * @param \Voipex\Ipbx\Model\Way $way way
     *
     * @return $this
     */
    public function setWay(\Voipex\Ipbx\Model\Way $way): static
    {
        if (is_null($way)) {
            throw new InvalidArgumentException('non-nullable way cannot be null');
        }
        $this->container['way'] = $way;

        return $this;
    }

    /**
     * Gets trunk
     *
     * @return string|null
     */
    public function getTrunk(): ?string
    {
        return $this->container['trunk'];
    }

    /**
     * Sets trunk
     *
     * @param string|null $trunk used SIP trunk
     *
     * @return $this
     */
    public function setTrunk(?string $trunk): static
    {
        if (is_null($trunk)) {
            throw new InvalidArgumentException('non-nullable trunk cannot be null');
        }
        $this->container['trunk'] = $trunk;

        return $this;
    }

    /**
     * Gets hangupcause
     *
     * @return string|null
     */
    public function getHangupcause(): ?string
    {
        return $this->container['hangupcause'];
    }

    /**
     * Sets hangupcause
     *
     * @param string|null $hangupcause hangupcause
     *
     * @return $this
     */
    public function setHangupcause(?string $hangupcause): static
    {
        if (is_null($hangupcause)) {
            throw new InvalidArgumentException('non-nullable hangupcause cannot be null');
        }
        $this->container['hangupcause'] = $hangupcause;

        return $this;
    }

    /**
     * Gets uniqueid
     *
     * @return string|null
     */
    public function getUniqueid(): ?string
    {
        return $this->container['uniqueid'];
    }

    /**
     * Sets uniqueid
     *
     * @param string|null $uniqueid uniqueid
     *
     * @return $this
     */
    public function setUniqueid(?string $uniqueid): static
    {
        if (is_null($uniqueid)) {
            throw new InvalidArgumentException('non-nullable uniqueid cannot be null');
        }
        $this->container['uniqueid'] = $uniqueid;

        return $this;
    }

    /**
     * Gets linkedid
     *
     * @return string|null
     */
    public function getLinkedid(): ?string
    {
        return $this->container['linkedid'];
    }

    /**
     * Sets linkedid
     *
     * @param string|null $linkedid linkedid
     *
     * @return $this
     */
    public function setLinkedid(?string $linkedid): static
    {
        if (is_null($linkedid)) {
            throw new InvalidArgumentException('non-nullable linkedid cannot be null');
        }
        $this->container['linkedid'] = $linkedid;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization(): string
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization calling organization from API8
     *
     * @return $this
     */
    public function setOrganization(string $organization): static
    {
        if (is_null($organization)) {
            throw new InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets organization_person
     *
     * @return string|null
     */
    public function getOrganizationPerson(): ?string
    {
        return $this->container['organization_person'];
    }

    /**
     * Sets organization_person
     *
     * @param string|null $organization_person organization_person
     *
     * @return $this
     */
    public function setOrganizationPerson(?string $organization_person): static
    {
        if (is_null($organization_person)) {
            throw new InvalidArgumentException('non-nullable organization_person cannot be null');
        }
        $this->container['organization_person'] = $organization_person;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData(): ?string
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data metadata
     *
     * @return $this
     */
    public function setData(?string $data): static
    {
        if (is_null($data)) {
            throw new InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets sipcallid
     *
     * @return string|null
     */
    public function getSipcallid(): ?string
    {
        return $this->container['sipcallid'];
    }

    /**
     * Sets sipcallid
     *
     * @param string|null $sipcallid sipcallid
     *
     * @return $this
     */
    public function setSipcallid(?string $sipcallid): static
    {
        if (is_null($sipcallid)) {
            throw new InvalidArgumentException('non-nullable sipcallid cannot be null');
        }
        $this->container['sipcallid'] = $sipcallid;

        return $this;
    }

    /**
     * Gets stamp
     *
     * @return \DateTime
     */
    public function getStamp(): \DateTime
    {
        return $this->container['stamp'];
    }

    /**
     * Sets stamp
     *
     * @param \DateTime $stamp creation date
     *
     * @return $this
     */
    public function setStamp(\DateTime $stamp): static
    {
        if (is_null($stamp)) {
            throw new InvalidArgumentException('non-nullable stamp cannot be null');
        }
        $this->container['stamp'] = $stamp;

        return $this;
    }

    /**
     * Gets cc_cb
     *
     * @return float|null
     */
    public function getCcCb(): ?float
    {
        return $this->container['cc_cb'];
    }

    /**
     * Sets cc_cb
     *
     * @param float|null $cc_cb cc_cb
     *
     * @return $this
     */
    public function setCcCb(?float $cc_cb): static
    {
        if (is_null($cc_cb)) {
            array_push($this->openAPINullablesSetToNull, 'cc_cb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc_cb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc_cb'] = $cc_cb;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return string|null
     */
    public function getQueue(): ?string
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param string|null $queue outgoing queue
     *
     * @return $this
     */
    public function setQueue(?string $queue): static
    {
        if (is_null($queue)) {
            array_push($this->openAPINullablesSetToNull, 'queue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('queue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote(): ?string
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return $this
     */
    public function setNote(?string $note): static
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories(): ?array
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories List of call categories
     *
     * @return $this
     */
    public function setCategories(?array $categories): static
    {
        if (is_null($categories)) {
            throw new InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber(): string
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Selection from src or dst field. If way is incoming then phoneNumber is source number. If way is outgoing then phoneNumber is destination number.
     *
     * @return $this
     */
    public function setPhoneNumber(string $phone_number): static
    {
        if (is_null($phone_number)) {
            throw new InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Voipex\Ipbx\Model\User|null
     */
    public function getUser(): ?\Voipex\Ipbx\Model\User
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Voipex\Ipbx\Model\User|null $user user
     *
     * @return $this
     */
    public function setUser(?\Voipex\Ipbx\Model\User $user): static
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime(): \DateTime
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time end_time
     *
     * @return $this
     */
    public function setEndTime(\DateTime $end_time): static
    {
        if (is_null($end_time)) {
            throw new InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets user_answered
     *
     * @return bool
     */
    public function getUserAnswered(): ?bool
    {
        return $this->container['user_answered'];
    }

    /**
     * Sets user_answered
     *
     * @param bool $user_answered user_answered
     *
     * @return $this
     */
    public function setUserAnswered(?bool $user_answered): static
    {
        if (is_null($user_answered)) {
            array_push($this->openAPINullablesSetToNull, 'user_answered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_answered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_answered'] = $user_answered;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


