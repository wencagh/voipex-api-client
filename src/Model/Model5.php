<?php
/**
 * Model5
 *
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Voipex\Ipbx\ObjectSerializer;

/**
 * Model5 Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Model5 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Model5';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'user_id' => 'string',
        'pbx_user_id' => 'float',
        'first_name' => 'string',
        'last_name' => 'string',
        'login' => 'string',
        'exten' => '\Voipex\Ipbx\Model\Exten',
        'queues' => '\Voipex\Ipbx\Model\Model4[]',
        'skills_group' => '\Voipex\Ipbx\Model\SkillsGroup'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'user_id' => null,
        'pbx_user_id' => null,
        'first_name' => null,
        'last_name' => null,
        'login' => null,
        'exten' => null,
        'queues' => null,
        'skills_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'user_id' => false,
        'pbx_user_id' => false,
        'first_name' => false,
        'last_name' => false,
        'login' => false,
        'exten' => true,
        'queues' => false,
        'skills_group' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'user_id' => 'userId',
        'pbx_user_id' => 'pbxUserId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'login' => 'login',
        'exten' => 'exten',
        'queues' => 'queues',
        'skills_group' => 'skillsGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'user_id' => 'setUserId',
        'pbx_user_id' => 'setPbxUserId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'login' => 'setLogin',
        'exten' => 'setExten',
        'queues' => 'setQueues',
        'skills_group' => 'setSkillsGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'user_id' => 'getUserId',
        'pbx_user_id' => 'getPbxUserId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'login' => 'getLogin',
        'exten' => 'getExten',
        'queues' => 'getQueues',
        'skills_group' => 'getSkillsGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('pbx_user_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('exten', $data ?? [], null);
        $this->setIfExists('queues', $data ?? [], null);
        $this->setIfExists('skills_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['pbx_user_id'] === null) {
            $invalidProperties[] = "'pbx_user_id' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['login'] === null) {
            $invalidProperties[] = "'login' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId(): string
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id User anvil id
     *
     * @return $this
     */
    public function setUserId(string $user_id): static
    {
        if (is_null($user_id)) {
            throw new InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets pbx_user_id
     *
     * @return float
     */
    public function getPbxUserId(): float
    {
        return $this->container['pbx_user_id'];
    }

    /**
     * Sets pbx_user_id
     *
     * @param float $pbx_user_id Pbx user id
     *
     * @return $this
     */
    public function setPbxUserId(float $pbx_user_id): static
    {
        if (is_null($pbx_user_id)) {
            throw new InvalidArgumentException('non-nullable pbx_user_id cannot be null');
        }
        $this->container['pbx_user_id'] = $pbx_user_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName(): string
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName(string $first_name): static
    {
        if (is_null($first_name)) {
            throw new InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName(): string
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName(string $last_name): static
    {
        if (is_null($last_name)) {
            throw new InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin(): string
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login login
     *
     * @return $this
     */
    public function setLogin(string $login): static
    {
        if (is_null($login)) {
            throw new InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets exten
     *
     * @return \Voipex\Ipbx\Model\Exten|null
     */
    public function getExten(): ?\Voipex\Ipbx\Model\Exten
    {
        return $this->container['exten'];
    }

    /**
     * Sets exten
     *
     * @param \Voipex\Ipbx\Model\Exten|null $exten exten
     *
     * @return $this
     */
    public function setExten(?\Voipex\Ipbx\Model\Exten $exten): static
    {
        if (is_null($exten)) {
            array_push($this->openAPINullablesSetToNull, 'exten');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exten', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exten'] = $exten;

        return $this;
    }

    /**
     * Gets queues
     *
     * @return \Voipex\Ipbx\Model\Model4[]|null
     */
    public function getQueues(): ?array
    {
        return $this->container['queues'];
    }

    /**
     * Sets queues
     *
     * @param \Voipex\Ipbx\Model\Model4[]|null $queues queues
     *
     * @return $this
     */
    public function setQueues(?array $queues): static
    {
        if (is_null($queues)) {
            throw new InvalidArgumentException('non-nullable queues cannot be null');
        }
        $this->container['queues'] = $queues;

        return $this;
    }

    /**
     * Gets skills_group
     *
     * @return \Voipex\Ipbx\Model\SkillsGroup|null
     */
    public function getSkillsGroup(): ?\Voipex\Ipbx\Model\SkillsGroup
    {
        return $this->container['skills_group'];
    }

    /**
     * Sets skills_group
     *
     * @param \Voipex\Ipbx\Model\SkillsGroup|null $skills_group skills_group
     *
     * @return $this
     */
    public function setSkillsGroup(?\Voipex\Ipbx\Model\SkillsGroup $skills_group): static
    {
        if (is_null($skills_group)) {
            array_push($this->openAPINullablesSetToNull, 'skills_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skills_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skills_group'] = $skills_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


