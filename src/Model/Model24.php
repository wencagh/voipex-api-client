<?php
/**
 * Model24
 *
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Voipex\Ipbx\ObjectSerializer;

/**
 * Model24 Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Model24 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Model24';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'total' => 'float',
        'answered' => 'float',
        'noanswer' => 'float',
        'after_sla' => 'float',
        'in_sla' => 'float',
        'avg_wait' => 'float',
        'max_wait' => 'float',
        'avg_dur' => 'float',
        'max_dur' => 'float',
        'noanswer_recur' => 'float',
        'noanswer_uniq' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'total' => null,
        'answered' => null,
        'noanswer' => null,
        'after_sla' => null,
        'in_sla' => null,
        'avg_wait' => null,
        'max_wait' => null,
        'avg_dur' => null,
        'max_dur' => null,
        'noanswer_recur' => null,
        'noanswer_uniq' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'total' => false,
        'answered' => false,
        'noanswer' => false,
        'after_sla' => false,
        'in_sla' => false,
        'avg_wait' => false,
        'max_wait' => false,
        'avg_dur' => false,
        'max_dur' => false,
        'noanswer_recur' => false,
        'noanswer_uniq' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'total' => 'total',
        'answered' => 'answered',
        'noanswer' => 'noanswer',
        'after_sla' => 'afterSla',
        'in_sla' => 'inSla',
        'avg_wait' => 'avgWait',
        'max_wait' => 'maxWait',
        'avg_dur' => 'avgDur',
        'max_dur' => 'maxDur',
        'noanswer_recur' => 'noanswerRecur',
        'noanswer_uniq' => 'noanswerUniq'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'total' => 'setTotal',
        'answered' => 'setAnswered',
        'noanswer' => 'setNoanswer',
        'after_sla' => 'setAfterSla',
        'in_sla' => 'setInSla',
        'avg_wait' => 'setAvgWait',
        'max_wait' => 'setMaxWait',
        'avg_dur' => 'setAvgDur',
        'max_dur' => 'setMaxDur',
        'noanswer_recur' => 'setNoanswerRecur',
        'noanswer_uniq' => 'setNoanswerUniq'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'total' => 'getTotal',
        'answered' => 'getAnswered',
        'noanswer' => 'getNoanswer',
        'after_sla' => 'getAfterSla',
        'in_sla' => 'getInSla',
        'avg_wait' => 'getAvgWait',
        'max_wait' => 'getMaxWait',
        'avg_dur' => 'getAvgDur',
        'max_dur' => 'getMaxDur',
        'noanswer_recur' => 'getNoanswerRecur',
        'noanswer_uniq' => 'getNoanswerUniq'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('answered', $data ?? [], null);
        $this->setIfExists('noanswer', $data ?? [], null);
        $this->setIfExists('after_sla', $data ?? [], null);
        $this->setIfExists('in_sla', $data ?? [], null);
        $this->setIfExists('avg_wait', $data ?? [], null);
        $this->setIfExists('max_wait', $data ?? [], null);
        $this->setIfExists('avg_dur', $data ?? [], null);
        $this->setIfExists('max_dur', $data ?? [], null);
        $this->setIfExists('noanswer_recur', $data ?? [], null);
        $this->setIfExists('noanswer_uniq', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['answered'] === null) {
            $invalidProperties[] = "'answered' can't be null";
        }
        if ($this->container['noanswer'] === null) {
            $invalidProperties[] = "'noanswer' can't be null";
        }
        if ($this->container['after_sla'] === null) {
            $invalidProperties[] = "'after_sla' can't be null";
        }
        if ($this->container['in_sla'] === null) {
            $invalidProperties[] = "'in_sla' can't be null";
        }
        if ($this->container['avg_wait'] === null) {
            $invalidProperties[] = "'avg_wait' can't be null";
        }
        if ($this->container['max_wait'] === null) {
            $invalidProperties[] = "'max_wait' can't be null";
        }
        if ($this->container['avg_dur'] === null) {
            $invalidProperties[] = "'avg_dur' can't be null";
        }
        if ($this->container['max_dur'] === null) {
            $invalidProperties[] = "'max_dur' can't be null";
        }
        if ($this->container['noanswer_recur'] === null) {
            $invalidProperties[] = "'noanswer_recur' can't be null";
        }
        if ($this->container['noanswer_uniq'] === null) {
            $invalidProperties[] = "'noanswer_uniq' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Queue name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal(): float
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return $this
     */
    public function setTotal(float $total): static
    {
        if (is_null($total)) {
            throw new InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets answered
     *
     * @return float
     */
    public function getAnswered(): float
    {
        return $this->container['answered'];
    }

    /**
     * Sets answered
     *
     * @param float $answered answered
     *
     * @return $this
     */
    public function setAnswered(float $answered): static
    {
        if (is_null($answered)) {
            throw new InvalidArgumentException('non-nullable answered cannot be null');
        }
        $this->container['answered'] = $answered;

        return $this;
    }

    /**
     * Gets noanswer
     *
     * @return float
     */
    public function getNoanswer(): float
    {
        return $this->container['noanswer'];
    }

    /**
     * Sets noanswer
     *
     * @param float $noanswer noanswer
     *
     * @return $this
     */
    public function setNoanswer(float $noanswer): static
    {
        if (is_null($noanswer)) {
            throw new InvalidArgumentException('non-nullable noanswer cannot be null');
        }
        $this->container['noanswer'] = $noanswer;

        return $this;
    }

    /**
     * Gets after_sla
     *
     * @return float
     */
    public function getAfterSla(): float
    {
        return $this->container['after_sla'];
    }

    /**
     * Sets after_sla
     *
     * @param float $after_sla after_sla
     *
     * @return $this
     */
    public function setAfterSla(float $after_sla): static
    {
        if (is_null($after_sla)) {
            throw new InvalidArgumentException('non-nullable after_sla cannot be null');
        }
        $this->container['after_sla'] = $after_sla;

        return $this;
    }

    /**
     * Gets in_sla
     *
     * @return float
     */
    public function getInSla(): float
    {
        return $this->container['in_sla'];
    }

    /**
     * Sets in_sla
     *
     * @param float $in_sla in_sla
     *
     * @return $this
     */
    public function setInSla(float $in_sla): static
    {
        if (is_null($in_sla)) {
            throw new InvalidArgumentException('non-nullable in_sla cannot be null');
        }
        $this->container['in_sla'] = $in_sla;

        return $this;
    }

    /**
     * Gets avg_wait
     *
     * @return float
     */
    public function getAvgWait(): float
    {
        return $this->container['avg_wait'];
    }

    /**
     * Sets avg_wait
     *
     * @param float $avg_wait avg_wait
     *
     * @return $this
     */
    public function setAvgWait(float $avg_wait): static
    {
        if (is_null($avg_wait)) {
            throw new InvalidArgumentException('non-nullable avg_wait cannot be null');
        }
        $this->container['avg_wait'] = $avg_wait;

        return $this;
    }

    /**
     * Gets max_wait
     *
     * @return float
     */
    public function getMaxWait(): float
    {
        return $this->container['max_wait'];
    }

    /**
     * Sets max_wait
     *
     * @param float $max_wait max_wait
     *
     * @return $this
     */
    public function setMaxWait(float $max_wait): static
    {
        if (is_null($max_wait)) {
            throw new InvalidArgumentException('non-nullable max_wait cannot be null');
        }
        $this->container['max_wait'] = $max_wait;

        return $this;
    }

    /**
     * Gets avg_dur
     *
     * @return float
     */
    public function getAvgDur(): float
    {
        return $this->container['avg_dur'];
    }

    /**
     * Sets avg_dur
     *
     * @param float $avg_dur avg_dur
     *
     * @return $this
     */
    public function setAvgDur(float $avg_dur): static
    {
        if (is_null($avg_dur)) {
            throw new InvalidArgumentException('non-nullable avg_dur cannot be null');
        }
        $this->container['avg_dur'] = $avg_dur;

        return $this;
    }

    /**
     * Gets max_dur
     *
     * @return float
     */
    public function getMaxDur(): float
    {
        return $this->container['max_dur'];
    }

    /**
     * Sets max_dur
     *
     * @param float $max_dur max_dur
     *
     * @return $this
     */
    public function setMaxDur(float $max_dur): static
    {
        if (is_null($max_dur)) {
            throw new InvalidArgumentException('non-nullable max_dur cannot be null');
        }
        $this->container['max_dur'] = $max_dur;

        return $this;
    }

    /**
     * Gets noanswer_recur
     *
     * @return float
     */
    public function getNoanswerRecur(): float
    {
        return $this->container['noanswer_recur'];
    }

    /**
     * Sets noanswer_recur
     *
     * @param float $noanswer_recur noanswer_recur
     *
     * @return $this
     */
    public function setNoanswerRecur(float $noanswer_recur): static
    {
        if (is_null($noanswer_recur)) {
            throw new InvalidArgumentException('non-nullable noanswer_recur cannot be null');
        }
        $this->container['noanswer_recur'] = $noanswer_recur;

        return $this;
    }

    /**
     * Gets noanswer_uniq
     *
     * @return float
     */
    public function getNoanswerUniq(): float
    {
        return $this->container['noanswer_uniq'];
    }

    /**
     * Sets noanswer_uniq
     *
     * @param float $noanswer_uniq noanswer_uniq
     *
     * @return $this
     */
    public function setNoanswerUniq(float $noanswer_uniq): static
    {
        if (is_null($noanswer_uniq)) {
            throw new InvalidArgumentException('non-nullable noanswer_uniq cannot be null');
        }
        $this->container['noanswer_uniq'] = $noanswer_uniq;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


