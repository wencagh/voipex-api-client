<?php
/**
 * Model50
 *
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Voipex\Ipbx\ObjectSerializer;

/**
 * Model50 Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Model50 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Model50';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'to' => 'string',
        'caller_id' => 'string',
        'caller_id_name' => 'string',
        'from_application' => '\Voipex\Ipbx\Model\FromApplication',
        'from_user' => '\Voipex\Ipbx\Model\FromUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'to' => null,
        'caller_id' => null,
        'caller_id_name' => null,
        'from_application' => null,
        'from_user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'to' => false,
        'caller_id' => false,
        'caller_id_name' => false,
        'from_application' => false,
        'from_user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'to' => 'to',
        'caller_id' => 'callerId',
        'caller_id_name' => 'callerIdName',
        'from_application' => 'fromApplication',
        'from_user' => 'fromUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'to' => 'setTo',
        'caller_id' => 'setCallerId',
        'caller_id_name' => 'setCallerIdName',
        'from_application' => 'setFromApplication',
        'from_user' => 'setFromUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'to' => 'getTo',
        'caller_id' => 'getCallerId',
        'caller_id_name' => 'getCallerIdName',
        'from_application' => 'getFromApplication',
        'from_user' => 'getFromUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('caller_id', $data ?? [], null);
        $this->setIfExists('caller_id_name', $data ?? [], null);
        $this->setIfExists('from_application', $data ?? [], null);
        $this->setIfExists('from_user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets to
     *
     * @return string
     */
    public function getTo(): string
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to The phone number to call.
     *
     * @return $this
     */
    public function setTo(string $to): static
    {
        if (is_null($to)) {
            throw new InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets caller_id
     *
     * @return string|null
     */
    public function getCallerId(): ?string
    {
        return $this->container['caller_id'];
    }

    /**
     * Sets caller_id
     *
     * @param string|null $caller_id The phone number to use as the caller id
     *
     * @return $this
     */
    public function setCallerId(?string $caller_id): static
    {
        if (is_null($caller_id)) {
            throw new InvalidArgumentException('non-nullable caller_id cannot be null');
        }
        $this->container['caller_id'] = $caller_id;

        return $this;
    }

    /**
     * Gets caller_id_name
     *
     * @return string|null
     */
    public function getCallerIdName(): ?string
    {
        return $this->container['caller_id_name'];
    }

    /**
     * Sets caller_id_name
     *
     * @param string|null $caller_id_name caller_id_name
     *
     * @return $this
     */
    public function setCallerIdName(?string $caller_id_name): static
    {
        if (is_null($caller_id_name)) {
            throw new InvalidArgumentException('non-nullable caller_id_name cannot be null');
        }
        $this->container['caller_id_name'] = $caller_id_name;

        return $this;
    }

    /**
     * Gets from_application
     *
     * @return \Voipex\Ipbx\Model\FromApplication|null
     */
    public function getFromApplication(): ?\Voipex\Ipbx\Model\FromApplication
    {
        return $this->container['from_application'];
    }

    /**
     * Sets from_application
     *
     * @param \Voipex\Ipbx\Model\FromApplication|null $from_application from_application
     *
     * @return $this
     */
    public function setFromApplication(?\Voipex\Ipbx\Model\FromApplication $from_application): static
    {
        if (is_null($from_application)) {
            throw new InvalidArgumentException('non-nullable from_application cannot be null');
        }
        $this->container['from_application'] = $from_application;

        return $this;
    }

    /**
     * Gets from_user
     *
     * @return \Voipex\Ipbx\Model\FromUser|null
     */
    public function getFromUser(): ?\Voipex\Ipbx\Model\FromUser
    {
        return $this->container['from_user'];
    }

    /**
     * Sets from_user
     *
     * @param \Voipex\Ipbx\Model\FromUser|null $from_user from_user
     *
     * @return $this
     */
    public function setFromUser(?\Voipex\Ipbx\Model\FromUser $from_user): static
    {
        if (is_null($from_user)) {
            throw new InvalidArgumentException('non-nullable from_user cannot be null');
        }
        $this->container['from_user'] = $from_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


