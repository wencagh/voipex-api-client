<?php
/**
 * Model22
 *
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Voipex\Ipbx\ObjectSerializer;

/**
 * Model22 Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Model22 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Model22';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'date' => 'string',
        'time' => 'string',
        'ivr' => 'string',
        'queue' => 'string',
        'user' => 'string',
        'direction' => 'string',
        'answered' => 'bool',
        'cb' => 'string',
        'cb_id' => 'string',
        'cb_who' => 'string',
        'cb_date' => 'string',
        'cb_time' => 'string',
        'cb_diff' => 'float',
        'checked' => 'bool',
        'cid' => 'string',
        'call_id' => 'string',
        'org' => 'string',
        'org_person' => 'string',
        'duration' => 'float',
        'wait' => 'float',
        'ringing' => 'float',
        'holdtime' => 'float',
        'members_count' => 'float',
        'waiting_calls' => 'float',
        'last_ringing' => 'string',
        'exit' => 'string',
        'position' => 'float',
        'attempt' => 'float',
        'customer_rating' => 'float',
        'customer_success' => 'float',
        'resolved_status' => 'string',
        'recording' => 'string',
        'linkedid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'date' => null,
        'time' => null,
        'ivr' => null,
        'queue' => null,
        'user' => null,
        'direction' => null,
        'answered' => null,
        'cb' => null,
        'cb_id' => null,
        'cb_who' => null,
        'cb_date' => null,
        'cb_time' => null,
        'cb_diff' => null,
        'checked' => null,
        'cid' => null,
        'call_id' => null,
        'org' => null,
        'org_person' => null,
        'duration' => null,
        'wait' => null,
        'ringing' => null,
        'holdtime' => null,
        'members_count' => null,
        'waiting_calls' => null,
        'last_ringing' => null,
        'exit' => null,
        'position' => null,
        'attempt' => null,
        'customer_rating' => null,
        'customer_success' => null,
        'resolved_status' => null,
        'recording' => null,
        'linkedid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'date' => false,
        'time' => false,
        'ivr' => true,
        'queue' => true,
        'user' => true,
        'direction' => false,
        'answered' => false,
        'cb' => true,
        'cb_id' => true,
        'cb_who' => true,
        'cb_date' => true,
        'cb_time' => true,
        'cb_diff' => true,
        'checked' => true,
        'cid' => true,
        'call_id' => false,
        'org' => true,
        'org_person' => true,
        'duration' => false,
        'wait' => true,
        'ringing' => false,
        'holdtime' => false,
        'members_count' => true,
        'waiting_calls' => true,
        'last_ringing' => true,
        'exit' => true,
        'position' => true,
        'attempt' => true,
        'customer_rating' => true,
        'customer_success' => true,
        'resolved_status' => true,
        'recording' => true,
        'linkedid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'date' => 'date',
        'time' => 'time',
        'ivr' => 'ivr',
        'queue' => 'queue',
        'user' => 'user',
        'direction' => 'direction',
        'answered' => 'answered',
        'cb' => 'cb',
        'cb_id' => 'cbId',
        'cb_who' => 'cbWho',
        'cb_date' => 'cbDate',
        'cb_time' => 'cbTime',
        'cb_diff' => 'cbDiff',
        'checked' => 'checked',
        'cid' => 'cid',
        'call_id' => 'callId',
        'org' => 'org',
        'org_person' => 'orgPerson',
        'duration' => 'duration',
        'wait' => 'wait',
        'ringing' => 'ringing',
        'holdtime' => 'holdtime',
        'members_count' => 'membersCount',
        'waiting_calls' => 'waitingCalls',
        'last_ringing' => 'lastRinging',
        'exit' => 'exit',
        'position' => 'position',
        'attempt' => 'attempt',
        'customer_rating' => 'customerRating',
        'customer_success' => 'customerSuccess',
        'resolved_status' => 'resolvedStatus',
        'recording' => 'recording',
        'linkedid' => 'linkedid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'date' => 'setDate',
        'time' => 'setTime',
        'ivr' => 'setIvr',
        'queue' => 'setQueue',
        'user' => 'setUser',
        'direction' => 'setDirection',
        'answered' => 'setAnswered',
        'cb' => 'setCb',
        'cb_id' => 'setCbId',
        'cb_who' => 'setCbWho',
        'cb_date' => 'setCbDate',
        'cb_time' => 'setCbTime',
        'cb_diff' => 'setCbDiff',
        'checked' => 'setChecked',
        'cid' => 'setCid',
        'call_id' => 'setCallId',
        'org' => 'setOrg',
        'org_person' => 'setOrgPerson',
        'duration' => 'setDuration',
        'wait' => 'setWait',
        'ringing' => 'setRinging',
        'holdtime' => 'setHoldtime',
        'members_count' => 'setMembersCount',
        'waiting_calls' => 'setWaitingCalls',
        'last_ringing' => 'setLastRinging',
        'exit' => 'setExit',
        'position' => 'setPosition',
        'attempt' => 'setAttempt',
        'customer_rating' => 'setCustomerRating',
        'customer_success' => 'setCustomerSuccess',
        'resolved_status' => 'setResolvedStatus',
        'recording' => 'setRecording',
        'linkedid' => 'setLinkedid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'date' => 'getDate',
        'time' => 'getTime',
        'ivr' => 'getIvr',
        'queue' => 'getQueue',
        'user' => 'getUser',
        'direction' => 'getDirection',
        'answered' => 'getAnswered',
        'cb' => 'getCb',
        'cb_id' => 'getCbId',
        'cb_who' => 'getCbWho',
        'cb_date' => 'getCbDate',
        'cb_time' => 'getCbTime',
        'cb_diff' => 'getCbDiff',
        'checked' => 'getChecked',
        'cid' => 'getCid',
        'call_id' => 'getCallId',
        'org' => 'getOrg',
        'org_person' => 'getOrgPerson',
        'duration' => 'getDuration',
        'wait' => 'getWait',
        'ringing' => 'getRinging',
        'holdtime' => 'getHoldtime',
        'members_count' => 'getMembersCount',
        'waiting_calls' => 'getWaitingCalls',
        'last_ringing' => 'getLastRinging',
        'exit' => 'getExit',
        'position' => 'getPosition',
        'attempt' => 'getAttempt',
        'customer_rating' => 'getCustomerRating',
        'customer_success' => 'getCustomerSuccess',
        'resolved_status' => 'getResolvedStatus',
        'recording' => 'getRecording',
        'linkedid' => 'getLinkedid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('ivr', $data ?? [], null);
        $this->setIfExists('queue', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('answered', $data ?? [], null);
        $this->setIfExists('cb', $data ?? [], null);
        $this->setIfExists('cb_id', $data ?? [], null);
        $this->setIfExists('cb_who', $data ?? [], null);
        $this->setIfExists('cb_date', $data ?? [], null);
        $this->setIfExists('cb_time', $data ?? [], null);
        $this->setIfExists('cb_diff', $data ?? [], null);
        $this->setIfExists('checked', $data ?? [], null);
        $this->setIfExists('cid', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('org', $data ?? [], null);
        $this->setIfExists('org_person', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('wait', $data ?? [], null);
        $this->setIfExists('ringing', $data ?? [], null);
        $this->setIfExists('holdtime', $data ?? [], null);
        $this->setIfExists('members_count', $data ?? [], null);
        $this->setIfExists('waiting_calls', $data ?? [], null);
        $this->setIfExists('last_ringing', $data ?? [], null);
        $this->setIfExists('exit', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('attempt', $data ?? [], null);
        $this->setIfExists('customer_rating', $data ?? [], null);
        $this->setIfExists('customer_success', $data ?? [], null);
        $this->setIfExists('resolved_status', $data ?? [], null);
        $this->setIfExists('recording', $data ?? [], null);
        $this->setIfExists('linkedid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        if ($this->container['answered'] === null) {
            $invalidProperties[] = "'answered' can't be null";
        }
        if ($this->container['checked'] === null) {
            $invalidProperties[] = "'checked' can't be null";
        }
        if ($this->container['call_id'] === null) {
            $invalidProperties[] = "'call_id' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['ringing'] === null) {
            $invalidProperties[] = "'ringing' can't be null";
        }
        if ($this->container['holdtime'] === null) {
            $invalidProperties[] = "'holdtime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return string
     */
    public function getDate(): string
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate(string $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime(): string
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return $this
     */
    public function setTime(string $time): static
    {
        if (is_null($time)) {
            throw new InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets ivr
     *
     * @return string|null
     */
    public function getIvr(): ?string
    {
        return $this->container['ivr'];
    }

    /**
     * Sets ivr
     *
     * @param string|null $ivr ivr
     *
     * @return $this
     */
    public function setIvr(?string $ivr): static
    {
        if (is_null($ivr)) {
            array_push($this->openAPINullablesSetToNull, 'ivr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ivr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ivr'] = $ivr;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return string|null
     */
    public function getQueue(): ?string
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param string|null $queue queue
     *
     * @return $this
     */
    public function setQueue(?string $queue): static
    {
        if (is_null($queue)) {
            array_push($this->openAPINullablesSetToNull, 'queue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('queue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser(): ?string
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return $this
     */
    public function setUser(?string $user): static
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection(): string
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection(string $direction): static
    {
        if (is_null($direction)) {
            throw new InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets answered
     *
     * @return bool
     */
    public function getAnswered(): bool
    {
        return $this->container['answered'];
    }

    /**
     * Sets answered
     *
     * @param bool $answered answered
     *
     * @return $this
     */
    public function setAnswered(bool $answered): static
    {
        if (is_null($answered)) {
            throw new InvalidArgumentException('non-nullable answered cannot be null');
        }
        $this->container['answered'] = $answered;

        return $this;
    }

    /**
     * Gets cb
     *
     * @return string|null
     */
    public function getCb(): ?string
    {
        return $this->container['cb'];
    }

    /**
     * Sets cb
     *
     * @param string|null $cb cb
     *
     * @return $this
     */
    public function setCb(?string $cb): static
    {
        if (is_null($cb)) {
            array_push($this->openAPINullablesSetToNull, 'cb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cb'] = $cb;

        return $this;
    }

    /**
     * Gets cb_id
     *
     * @return string|null
     */
    public function getCbId(): ?string
    {
        return $this->container['cb_id'];
    }

    /**
     * Sets cb_id
     *
     * @param string|null $cb_id cb_id
     *
     * @return $this
     */
    public function setCbId(?string $cb_id): static
    {
        if (is_null($cb_id)) {
            array_push($this->openAPINullablesSetToNull, 'cb_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cb_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cb_id'] = $cb_id;

        return $this;
    }

    /**
     * Gets cb_who
     *
     * @return string|null
     */
    public function getCbWho(): ?string
    {
        return $this->container['cb_who'];
    }

    /**
     * Sets cb_who
     *
     * @param string|null $cb_who cb_who
     *
     * @return $this
     */
    public function setCbWho(?string $cb_who): static
    {
        if (is_null($cb_who)) {
            array_push($this->openAPINullablesSetToNull, 'cb_who');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cb_who', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cb_who'] = $cb_who;

        return $this;
    }

    /**
     * Gets cb_date
     *
     * @return string|null
     */
    public function getCbDate(): ?string
    {
        return $this->container['cb_date'];
    }

    /**
     * Sets cb_date
     *
     * @param string|null $cb_date cb_date
     *
     * @return $this
     */
    public function setCbDate(?string $cb_date): static
    {
        if (is_null($cb_date)) {
            array_push($this->openAPINullablesSetToNull, 'cb_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cb_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cb_date'] = $cb_date;

        return $this;
    }

    /**
     * Gets cb_time
     *
     * @return string|null
     */
    public function getCbTime(): ?string
    {
        return $this->container['cb_time'];
    }

    /**
     * Sets cb_time
     *
     * @param string|null $cb_time cb_time
     *
     * @return $this
     */
    public function setCbTime(?string $cb_time): static
    {
        if (is_null($cb_time)) {
            array_push($this->openAPINullablesSetToNull, 'cb_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cb_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cb_time'] = $cb_time;

        return $this;
    }

    /**
     * Gets cb_diff
     *
     * @return float|null
     */
    public function getCbDiff(): ?float
    {
        return $this->container['cb_diff'];
    }

    /**
     * Sets cb_diff
     *
     * @param float|null $cb_diff cb_diff
     *
     * @return $this
     */
    public function setCbDiff(?float $cb_diff): static
    {
        if (is_null($cb_diff)) {
            array_push($this->openAPINullablesSetToNull, 'cb_diff');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cb_diff', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cb_diff'] = $cb_diff;

        return $this;
    }

    /**
     * Gets checked
     *
     * @return bool
     */
    public function getChecked(): ?bool
    {
        return $this->container['checked'];
    }

    /**
     * Sets checked
     *
     * @param bool $checked checked
     *
     * @return $this
     */
    public function setChecked(?bool $checked): static
    {
        if (is_null($checked)) {
            array_push($this->openAPINullablesSetToNull, 'checked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('checked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['checked'] = $checked;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return string|null
     */
    public function getCid(): ?string
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param string|null $cid cid
     *
     * @return $this
     */
    public function setCid(?string $cid): static
    {
        if (is_null($cid)) {
            array_push($this->openAPINullablesSetToNull, 'cid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string
     */
    public function getCallId(): string
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string $call_id call_id
     *
     * @return $this
     */
    public function setCallId(string $call_id): static
    {
        if (is_null($call_id)) {
            throw new InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets org
     *
     * @return string|null
     */
    public function getOrg(): ?string
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param string|null $org org
     *
     * @return $this
     */
    public function setOrg(?string $org): static
    {
        if (is_null($org)) {
            array_push($this->openAPINullablesSetToNull, 'org');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('org', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets org_person
     *
     * @return string|null
     */
    public function getOrgPerson(): ?string
    {
        return $this->container['org_person'];
    }

    /**
     * Sets org_person
     *
     * @param string|null $org_person org_person
     *
     * @return $this
     */
    public function setOrgPerson(?string $org_person): static
    {
        if (is_null($org_person)) {
            array_push($this->openAPINullablesSetToNull, 'org_person');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('org_person', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['org_person'] = $org_person;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration(): float
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration duration
     *
     * @return $this
     */
    public function setDuration(float $duration): static
    {
        if (is_null($duration)) {
            throw new InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets wait
     *
     * @return float|null
     */
    public function getWait(): ?float
    {
        return $this->container['wait'];
    }

    /**
     * Sets wait
     *
     * @param float|null $wait wait
     *
     * @return $this
     */
    public function setWait(?float $wait): static
    {
        if (is_null($wait)) {
            array_push($this->openAPINullablesSetToNull, 'wait');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wait', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wait'] = $wait;

        return $this;
    }

    /**
     * Gets ringing
     *
     * @return float
     */
    public function getRinging(): float
    {
        return $this->container['ringing'];
    }

    /**
     * Sets ringing
     *
     * @param float $ringing ringing
     *
     * @return $this
     */
    public function setRinging(float $ringing): static
    {
        if (is_null($ringing)) {
            throw new InvalidArgumentException('non-nullable ringing cannot be null');
        }
        $this->container['ringing'] = $ringing;

        return $this;
    }

    /**
     * Gets holdtime
     *
     * @return float
     */
    public function getHoldtime(): float
    {
        return $this->container['holdtime'];
    }

    /**
     * Sets holdtime
     *
     * @param float $holdtime holdtime
     *
     * @return $this
     */
    public function setHoldtime(float $holdtime): static
    {
        if (is_null($holdtime)) {
            throw new InvalidArgumentException('non-nullable holdtime cannot be null');
        }
        $this->container['holdtime'] = $holdtime;

        return $this;
    }

    /**
     * Gets members_count
     *
     * @return float|null
     */
    public function getMembersCount(): ?float
    {
        return $this->container['members_count'];
    }

    /**
     * Sets members_count
     *
     * @param float|null $members_count members_count
     *
     * @return $this
     */
    public function setMembersCount(?float $members_count): static
    {
        if (is_null($members_count)) {
            array_push($this->openAPINullablesSetToNull, 'members_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('members_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['members_count'] = $members_count;

        return $this;
    }

    /**
     * Gets waiting_calls
     *
     * @return float|null
     */
    public function getWaitingCalls(): ?float
    {
        return $this->container['waiting_calls'];
    }

    /**
     * Sets waiting_calls
     *
     * @param float|null $waiting_calls waiting_calls
     *
     * @return $this
     */
    public function setWaitingCalls(?float $waiting_calls): static
    {
        if (is_null($waiting_calls)) {
            array_push($this->openAPINullablesSetToNull, 'waiting_calls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('waiting_calls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['waiting_calls'] = $waiting_calls;

        return $this;
    }

    /**
     * Gets last_ringing
     *
     * @return string|null
     */
    public function getLastRinging(): ?string
    {
        return $this->container['last_ringing'];
    }

    /**
     * Sets last_ringing
     *
     * @param string|null $last_ringing last_ringing
     *
     * @return $this
     */
    public function setLastRinging(?string $last_ringing): static
    {
        if (is_null($last_ringing)) {
            array_push($this->openAPINullablesSetToNull, 'last_ringing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_ringing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_ringing'] = $last_ringing;

        return $this;
    }

    /**
     * Gets exit
     *
     * @return string|null
     */
    public function getExit(): ?string
    {
        return $this->container['exit'];
    }

    /**
     * Sets exit
     *
     * @param string|null $exit exit
     *
     * @return $this
     */
    public function setExit(?string $exit): static
    {
        if (is_null($exit)) {
            array_push($this->openAPINullablesSetToNull, 'exit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exit'] = $exit;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float|null
     */
    public function getPosition(): ?float
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float|null $position position
     *
     * @return $this
     */
    public function setPosition(?float $position): static
    {
        if (is_null($position)) {
            array_push($this->openAPINullablesSetToNull, 'position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets attempt
     *
     * @return float|null
     */
    public function getAttempt(): ?float
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param float|null $attempt attempt
     *
     * @return $this
     */
    public function setAttempt(?float $attempt): static
    {
        if (is_null($attempt)) {
            array_push($this->openAPINullablesSetToNull, 'attempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets customer_rating
     *
     * @return float|null
     */
    public function getCustomerRating(): ?float
    {
        return $this->container['customer_rating'];
    }

    /**
     * Sets customer_rating
     *
     * @param float|null $customer_rating customer_rating
     *
     * @return $this
     */
    public function setCustomerRating(?float $customer_rating): static
    {
        if (is_null($customer_rating)) {
            array_push($this->openAPINullablesSetToNull, 'customer_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_rating'] = $customer_rating;

        return $this;
    }

    /**
     * Gets customer_success
     *
     * @return float|null
     */
    public function getCustomerSuccess(): ?float
    {
        return $this->container['customer_success'];
    }

    /**
     * Sets customer_success
     *
     * @param float|null $customer_success customer_success
     *
     * @return $this
     */
    public function setCustomerSuccess(?float $customer_success): static
    {
        if (is_null($customer_success)) {
            array_push($this->openAPINullablesSetToNull, 'customer_success');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_success', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_success'] = $customer_success;

        return $this;
    }

    /**
     * Gets resolved_status
     *
     * @return string|null
     */
    public function getResolvedStatus(): ?string
    {
        return $this->container['resolved_status'];
    }

    /**
     * Sets resolved_status
     *
     * @param string|null $resolved_status resolved_status
     *
     * @return $this
     */
    public function setResolvedStatus(?string $resolved_status): static
    {
        if (is_null($resolved_status)) {
            array_push($this->openAPINullablesSetToNull, 'resolved_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resolved_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resolved_status'] = $resolved_status;

        return $this;
    }

    /**
     * Gets recording
     *
     * @return string|null
     */
    public function getRecording(): ?string
    {
        return $this->container['recording'];
    }

    /**
     * Sets recording
     *
     * @param string|null $recording recording
     *
     * @return $this
     */
    public function setRecording(?string $recording): static
    {
        if (is_null($recording)) {
            array_push($this->openAPINullablesSetToNull, 'recording');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recording', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recording'] = $recording;

        return $this;
    }

    /**
     * Gets linkedid
     *
     * @return string|null
     */
    public function getLinkedid(): ?string
    {
        return $this->container['linkedid'];
    }

    /**
     * Sets linkedid
     *
     * @param string|null $linkedid linkedid
     *
     * @return $this
     */
    public function setLinkedid(?string $linkedid): static
    {
        if (is_null($linkedid)) {
            array_push($this->openAPINullablesSetToNull, 'linkedid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linkedid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['linkedid'] = $linkedid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


