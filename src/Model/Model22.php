<?php
/**
 * Model22
 *
 * PHP version 5
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * OpenAPI spec version: 1.98.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use \ArrayAccess;
use \Voipex\Ipbx\ObjectSerializer;

/**
 * Model22 Class Doc Comment
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Model22 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model22';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => 'string',
        'time' => 'string',
        'ivr' => 'string',
        'queue' => 'string',
        'user' => 'string',
        'direction' => 'string',
        'answered' => 'bool',
        'cb' => 'string',
        'cb_id' => 'string',
        'cb_who' => 'string',
        'cb_date' => 'string',
        'cb_time' => 'string',
        'cb_diff' => 'float',
        'checked' => 'bool',
        'cid' => 'string',
        'call_id' => 'string',
        'org' => 'string',
        'org_person' => 'string',
        'duration' => 'float',
        'wait' => 'float',
        'ringing' => 'float',
        'holdtime' => 'float',
        'members_count' => 'float',
        'waiting_calls' => 'float',
        'last_ringing' => 'string',
        'exit' => 'string',
        'position' => 'float',
        'attempt' => 'float',
        'customer_rating' => 'float',
        'customer_success' => 'float',
        'resolved_status' => 'string',
        'recording' => 'string',
        'linkedid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => null,
        'time' => null,
        'ivr' => null,
        'queue' => null,
        'user' => null,
        'direction' => null,
        'answered' => null,
        'cb' => null,
        'cb_id' => null,
        'cb_who' => null,
        'cb_date' => null,
        'cb_time' => null,
        'cb_diff' => null,
        'checked' => null,
        'cid' => null,
        'call_id' => null,
        'org' => null,
        'org_person' => null,
        'duration' => null,
        'wait' => null,
        'ringing' => null,
        'holdtime' => null,
        'members_count' => null,
        'waiting_calls' => null,
        'last_ringing' => null,
        'exit' => null,
        'position' => null,
        'attempt' => null,
        'customer_rating' => null,
        'customer_success' => null,
        'resolved_status' => null,
        'recording' => null,
        'linkedid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'time' => 'time',
        'ivr' => 'ivr',
        'queue' => 'queue',
        'user' => 'user',
        'direction' => 'direction',
        'answered' => 'answered',
        'cb' => 'cb',
        'cb_id' => 'cbId',
        'cb_who' => 'cbWho',
        'cb_date' => 'cbDate',
        'cb_time' => 'cbTime',
        'cb_diff' => 'cbDiff',
        'checked' => 'checked',
        'cid' => 'cid',
        'call_id' => 'callId',
        'org' => 'org',
        'org_person' => 'orgPerson',
        'duration' => 'duration',
        'wait' => 'wait',
        'ringing' => 'ringing',
        'holdtime' => 'holdtime',
        'members_count' => 'membersCount',
        'waiting_calls' => 'waitingCalls',
        'last_ringing' => 'lastRinging',
        'exit' => 'exit',
        'position' => 'position',
        'attempt' => 'attempt',
        'customer_rating' => 'customerRating',
        'customer_success' => 'customerSuccess',
        'resolved_status' => 'resolvedStatus',
        'recording' => 'recording',
        'linkedid' => 'linkedid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'time' => 'setTime',
        'ivr' => 'setIvr',
        'queue' => 'setQueue',
        'user' => 'setUser',
        'direction' => 'setDirection',
        'answered' => 'setAnswered',
        'cb' => 'setCb',
        'cb_id' => 'setCbId',
        'cb_who' => 'setCbWho',
        'cb_date' => 'setCbDate',
        'cb_time' => 'setCbTime',
        'cb_diff' => 'setCbDiff',
        'checked' => 'setChecked',
        'cid' => 'setCid',
        'call_id' => 'setCallId',
        'org' => 'setOrg',
        'org_person' => 'setOrgPerson',
        'duration' => 'setDuration',
        'wait' => 'setWait',
        'ringing' => 'setRinging',
        'holdtime' => 'setHoldtime',
        'members_count' => 'setMembersCount',
        'waiting_calls' => 'setWaitingCalls',
        'last_ringing' => 'setLastRinging',
        'exit' => 'setExit',
        'position' => 'setPosition',
        'attempt' => 'setAttempt',
        'customer_rating' => 'setCustomerRating',
        'customer_success' => 'setCustomerSuccess',
        'resolved_status' => 'setResolvedStatus',
        'recording' => 'setRecording',
        'linkedid' => 'setLinkedid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'time' => 'getTime',
        'ivr' => 'getIvr',
        'queue' => 'getQueue',
        'user' => 'getUser',
        'direction' => 'getDirection',
        'answered' => 'getAnswered',
        'cb' => 'getCb',
        'cb_id' => 'getCbId',
        'cb_who' => 'getCbWho',
        'cb_date' => 'getCbDate',
        'cb_time' => 'getCbTime',
        'cb_diff' => 'getCbDiff',
        'checked' => 'getChecked',
        'cid' => 'getCid',
        'call_id' => 'getCallId',
        'org' => 'getOrg',
        'org_person' => 'getOrgPerson',
        'duration' => 'getDuration',
        'wait' => 'getWait',
        'ringing' => 'getRinging',
        'holdtime' => 'getHoldtime',
        'members_count' => 'getMembersCount',
        'waiting_calls' => 'getWaitingCalls',
        'last_ringing' => 'getLastRinging',
        'exit' => 'getExit',
        'position' => 'getPosition',
        'attempt' => 'getAttempt',
        'customer_rating' => 'getCustomerRating',
        'customer_success' => 'getCustomerSuccess',
        'resolved_status' => 'getResolvedStatus',
        'recording' => 'getRecording',
        'linkedid' => 'getLinkedid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['ivr'] = isset($data['ivr']) ? $data['ivr'] : null;
        $this->container['queue'] = isset($data['queue']) ? $data['queue'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['answered'] = isset($data['answered']) ? $data['answered'] : null;
        $this->container['cb'] = isset($data['cb']) ? $data['cb'] : null;
        $this->container['cb_id'] = isset($data['cb_id']) ? $data['cb_id'] : null;
        $this->container['cb_who'] = isset($data['cb_who']) ? $data['cb_who'] : null;
        $this->container['cb_date'] = isset($data['cb_date']) ? $data['cb_date'] : null;
        $this->container['cb_time'] = isset($data['cb_time']) ? $data['cb_time'] : null;
        $this->container['cb_diff'] = isset($data['cb_diff']) ? $data['cb_diff'] : null;
        $this->container['checked'] = isset($data['checked']) ? $data['checked'] : null;
        $this->container['cid'] = isset($data['cid']) ? $data['cid'] : null;
        $this->container['call_id'] = isset($data['call_id']) ? $data['call_id'] : null;
        $this->container['org'] = isset($data['org']) ? $data['org'] : null;
        $this->container['org_person'] = isset($data['org_person']) ? $data['org_person'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['wait'] = isset($data['wait']) ? $data['wait'] : null;
        $this->container['ringing'] = isset($data['ringing']) ? $data['ringing'] : null;
        $this->container['holdtime'] = isset($data['holdtime']) ? $data['holdtime'] : null;
        $this->container['members_count'] = isset($data['members_count']) ? $data['members_count'] : null;
        $this->container['waiting_calls'] = isset($data['waiting_calls']) ? $data['waiting_calls'] : null;
        $this->container['last_ringing'] = isset($data['last_ringing']) ? $data['last_ringing'] : null;
        $this->container['exit'] = isset($data['exit']) ? $data['exit'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['attempt'] = isset($data['attempt']) ? $data['attempt'] : null;
        $this->container['customer_rating'] = isset($data['customer_rating']) ? $data['customer_rating'] : null;
        $this->container['customer_success'] = isset($data['customer_success']) ? $data['customer_success'] : null;
        $this->container['resolved_status'] = isset($data['resolved_status']) ? $data['resolved_status'] : null;
        $this->container['recording'] = isset($data['recording']) ? $data['recording'] : null;
        $this->container['linkedid'] = isset($data['linkedid']) ? $data['linkedid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        if ($this->container['answered'] === null) {
            $invalidProperties[] = "'answered' can't be null";
        }
        if ($this->container['checked'] === null) {
            $invalidProperties[] = "'checked' can't be null";
        }
        if ($this->container['call_id'] === null) {
            $invalidProperties[] = "'call_id' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['ringing'] === null) {
            $invalidProperties[] = "'ringing' can't be null";
        }
        if ($this->container['holdtime'] === null) {
            $invalidProperties[] = "'holdtime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets ivr
     *
     * @return string
     */
    public function getIvr()
    {
        return $this->container['ivr'];
    }

    /**
     * Sets ivr
     *
     * @param string $ivr ivr
     *
     * @return $this
     */
    public function setIvr($ivr)
    {
        $this->container['ivr'] = $ivr;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return string
     */
    public function getQueue()
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param string $queue queue
     *
     * @return $this
     */
    public function setQueue($queue)
    {
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets answered
     *
     * @return bool
     */
    public function getAnswered()
    {
        return $this->container['answered'];
    }

    /**
     * Sets answered
     *
     * @param bool $answered answered
     *
     * @return $this
     */
    public function setAnswered($answered)
    {
        $this->container['answered'] = $answered;

        return $this;
    }

    /**
     * Gets cb
     *
     * @return string
     */
    public function getCb()
    {
        return $this->container['cb'];
    }

    /**
     * Sets cb
     *
     * @param string $cb cb
     *
     * @return $this
     */
    public function setCb($cb)
    {
        $this->container['cb'] = $cb;

        return $this;
    }

    /**
     * Gets cb_id
     *
     * @return string
     */
    public function getCbId()
    {
        return $this->container['cb_id'];
    }

    /**
     * Sets cb_id
     *
     * @param string $cb_id cb_id
     *
     * @return $this
     */
    public function setCbId($cb_id)
    {
        $this->container['cb_id'] = $cb_id;

        return $this;
    }

    /**
     * Gets cb_who
     *
     * @return string
     */
    public function getCbWho()
    {
        return $this->container['cb_who'];
    }

    /**
     * Sets cb_who
     *
     * @param string $cb_who cb_who
     *
     * @return $this
     */
    public function setCbWho($cb_who)
    {
        $this->container['cb_who'] = $cb_who;

        return $this;
    }

    /**
     * Gets cb_date
     *
     * @return string
     */
    public function getCbDate()
    {
        return $this->container['cb_date'];
    }

    /**
     * Sets cb_date
     *
     * @param string $cb_date cb_date
     *
     * @return $this
     */
    public function setCbDate($cb_date)
    {
        $this->container['cb_date'] = $cb_date;

        return $this;
    }

    /**
     * Gets cb_time
     *
     * @return string
     */
    public function getCbTime()
    {
        return $this->container['cb_time'];
    }

    /**
     * Sets cb_time
     *
     * @param string $cb_time cb_time
     *
     * @return $this
     */
    public function setCbTime($cb_time)
    {
        $this->container['cb_time'] = $cb_time;

        return $this;
    }

    /**
     * Gets cb_diff
     *
     * @return float
     */
    public function getCbDiff()
    {
        return $this->container['cb_diff'];
    }

    /**
     * Sets cb_diff
     *
     * @param float $cb_diff cb_diff
     *
     * @return $this
     */
    public function setCbDiff($cb_diff)
    {
        $this->container['cb_diff'] = $cb_diff;

        return $this;
    }

    /**
     * Gets checked
     *
     * @return bool
     */
    public function getChecked()
    {
        return $this->container['checked'];
    }

    /**
     * Sets checked
     *
     * @param bool $checked checked
     *
     * @return $this
     */
    public function setChecked($checked)
    {
        $this->container['checked'] = $checked;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return string
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param string $cid cid
     *
     * @return $this
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string $call_id call_id
     *
     * @return $this
     */
    public function setCallId($call_id)
    {
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets org
     *
     * @return string
     */
    public function getOrg()
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param string $org org
     *
     * @return $this
     */
    public function setOrg($org)
    {
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets org_person
     *
     * @return string
     */
    public function getOrgPerson()
    {
        return $this->container['org_person'];
    }

    /**
     * Sets org_person
     *
     * @param string $org_person org_person
     *
     * @return $this
     */
    public function setOrgPerson($org_person)
    {
        $this->container['org_person'] = $org_person;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets wait
     *
     * @return float
     */
    public function getWait()
    {
        return $this->container['wait'];
    }

    /**
     * Sets wait
     *
     * @param float $wait wait
     *
     * @return $this
     */
    public function setWait($wait)
    {
        $this->container['wait'] = $wait;

        return $this;
    }

    /**
     * Gets ringing
     *
     * @return float
     */
    public function getRinging()
    {
        return $this->container['ringing'];
    }

    /**
     * Sets ringing
     *
     * @param float $ringing ringing
     *
     * @return $this
     */
    public function setRinging($ringing)
    {
        $this->container['ringing'] = $ringing;

        return $this;
    }

    /**
     * Gets holdtime
     *
     * @return float
     */
    public function getHoldtime()
    {
        return $this->container['holdtime'];
    }

    /**
     * Sets holdtime
     *
     * @param float $holdtime holdtime
     *
     * @return $this
     */
    public function setHoldtime($holdtime)
    {
        $this->container['holdtime'] = $holdtime;

        return $this;
    }

    /**
     * Gets members_count
     *
     * @return float
     */
    public function getMembersCount()
    {
        return $this->container['members_count'];
    }

    /**
     * Sets members_count
     *
     * @param float $members_count members_count
     *
     * @return $this
     */
    public function setMembersCount($members_count)
    {
        $this->container['members_count'] = $members_count;

        return $this;
    }

    /**
     * Gets waiting_calls
     *
     * @return float
     */
    public function getWaitingCalls()
    {
        return $this->container['waiting_calls'];
    }

    /**
     * Sets waiting_calls
     *
     * @param float $waiting_calls waiting_calls
     *
     * @return $this
     */
    public function setWaitingCalls($waiting_calls)
    {
        $this->container['waiting_calls'] = $waiting_calls;

        return $this;
    }

    /**
     * Gets last_ringing
     *
     * @return string
     */
    public function getLastRinging()
    {
        return $this->container['last_ringing'];
    }

    /**
     * Sets last_ringing
     *
     * @param string $last_ringing last_ringing
     *
     * @return $this
     */
    public function setLastRinging($last_ringing)
    {
        $this->container['last_ringing'] = $last_ringing;

        return $this;
    }

    /**
     * Gets exit
     *
     * @return string
     */
    public function getExit()
    {
        return $this->container['exit'];
    }

    /**
     * Sets exit
     *
     * @param string $exit exit
     *
     * @return $this
     */
    public function setExit($exit)
    {
        $this->container['exit'] = $exit;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets attempt
     *
     * @return float
     */
    public function getAttempt()
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param float $attempt attempt
     *
     * @return $this
     */
    public function setAttempt($attempt)
    {
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets customer_rating
     *
     * @return float
     */
    public function getCustomerRating()
    {
        return $this->container['customer_rating'];
    }

    /**
     * Sets customer_rating
     *
     * @param float $customer_rating customer_rating
     *
     * @return $this
     */
    public function setCustomerRating($customer_rating)
    {
        $this->container['customer_rating'] = $customer_rating;

        return $this;
    }

    /**
     * Gets customer_success
     *
     * @return float
     */
    public function getCustomerSuccess()
    {
        return $this->container['customer_success'];
    }

    /**
     * Sets customer_success
     *
     * @param float $customer_success customer_success
     *
     * @return $this
     */
    public function setCustomerSuccess($customer_success)
    {
        $this->container['customer_success'] = $customer_success;

        return $this;
    }

    /**
     * Gets resolved_status
     *
     * @return string
     */
    public function getResolvedStatus()
    {
        return $this->container['resolved_status'];
    }

    /**
     * Sets resolved_status
     *
     * @param string $resolved_status resolved_status
     *
     * @return $this
     */
    public function setResolvedStatus($resolved_status)
    {
        $this->container['resolved_status'] = $resolved_status;

        return $this;
    }

    /**
     * Gets recording
     *
     * @return string
     */
    public function getRecording()
    {
        return $this->container['recording'];
    }

    /**
     * Sets recording
     *
     * @param string $recording recording
     *
     * @return $this
     */
    public function setRecording($recording)
    {
        $this->container['recording'] = $recording;

        return $this;
    }

    /**
     * Gets linkedid
     *
     * @return string
     */
    public function getLinkedid()
    {
        return $this->container['linkedid'];
    }

    /**
     * Sets linkedid
     *
     * @param string $linkedid linkedid
     *
     * @return $this
     */
    public function setLinkedid($linkedid)
    {
        $this->container['linkedid'] = $linkedid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
