<?php
/**
 * Model39
 *
 * PHP version 5
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * OpenAPI spec version: 1.98.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use \ArrayAccess;
use \Voipex\Ipbx\ObjectSerializer;

/**
 * Model39 Class Doc Comment
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Model39 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model39';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'logged_in' => '\Voipex\Ipbx\Model\LoggedIn',
        'paused_in' => '\Voipex\Ipbx\Model\PausedIn',
        'is_dynamic' => 'bool',
        'was_once_paused' => 'bool',
        'was_once_logged' => 'bool',
        'logon_start_time' => '\DateTime',
        'pause_start_time' => '\DateTime',
        'pending_call_start_time' => 'bool',
        'durations' => '\Voipex\Ipbx\Model\Durations'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'logged_in' => null,
        'paused_in' => null,
        'is_dynamic' => null,
        'was_once_paused' => null,
        'was_once_logged' => null,
        'logon_start_time' => 'date-time',
        'pause_start_time' => 'date-time',
        'pending_call_start_time' => null,
        'durations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'logged_in' => 'loggedIn',
        'paused_in' => 'pausedIn',
        'is_dynamic' => 'isDynamic',
        'was_once_paused' => 'wasOncePaused',
        'was_once_logged' => 'wasOnceLogged',
        'logon_start_time' => 'logonStartTime',
        'pause_start_time' => 'pauseStartTime',
        'pending_call_start_time' => 'pendingCallStartTime',
        'durations' => 'durations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'logged_in' => 'setLoggedIn',
        'paused_in' => 'setPausedIn',
        'is_dynamic' => 'setIsDynamic',
        'was_once_paused' => 'setWasOncePaused',
        'was_once_logged' => 'setWasOnceLogged',
        'logon_start_time' => 'setLogonStartTime',
        'pause_start_time' => 'setPauseStartTime',
        'pending_call_start_time' => 'setPendingCallStartTime',
        'durations' => 'setDurations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'logged_in' => 'getLoggedIn',
        'paused_in' => 'getPausedIn',
        'is_dynamic' => 'getIsDynamic',
        'was_once_paused' => 'getWasOncePaused',
        'was_once_logged' => 'getWasOnceLogged',
        'logon_start_time' => 'getLogonStartTime',
        'pause_start_time' => 'getPauseStartTime',
        'pending_call_start_time' => 'getPendingCallStartTime',
        'durations' => 'getDurations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['logged_in'] = isset($data['logged_in']) ? $data['logged_in'] : null;
        $this->container['paused_in'] = isset($data['paused_in']) ? $data['paused_in'] : null;
        $this->container['is_dynamic'] = isset($data['is_dynamic']) ? $data['is_dynamic'] : null;
        $this->container['was_once_paused'] = isset($data['was_once_paused']) ? $data['was_once_paused'] : null;
        $this->container['was_once_logged'] = isset($data['was_once_logged']) ? $data['was_once_logged'] : null;
        $this->container['logon_start_time'] = isset($data['logon_start_time']) ? $data['logon_start_time'] : null;
        $this->container['pause_start_time'] = isset($data['pause_start_time']) ? $data['pause_start_time'] : null;
        $this->container['pending_call_start_time'] = isset($data['pending_call_start_time']) ? $data['pending_call_start_time'] : null;
        $this->container['durations'] = isset($data['durations']) ? $data['durations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['logged_in'] === null) {
            $invalidProperties[] = "'logged_in' can't be null";
        }
        if ($this->container['paused_in'] === null) {
            $invalidProperties[] = "'paused_in' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets logged_in
     *
     * @return \Voipex\Ipbx\Model\LoggedIn
     */
    public function getLoggedIn()
    {
        return $this->container['logged_in'];
    }

    /**
     * Sets logged_in
     *
     * @param \Voipex\Ipbx\Model\LoggedIn $logged_in logged_in
     *
     * @return $this
     */
    public function setLoggedIn($logged_in)
    {
        $this->container['logged_in'] = $logged_in;

        return $this;
    }

    /**
     * Gets paused_in
     *
     * @return \Voipex\Ipbx\Model\PausedIn
     */
    public function getPausedIn()
    {
        return $this->container['paused_in'];
    }

    /**
     * Sets paused_in
     *
     * @param \Voipex\Ipbx\Model\PausedIn $paused_in paused_in
     *
     * @return $this
     */
    public function setPausedIn($paused_in)
    {
        $this->container['paused_in'] = $paused_in;

        return $this;
    }

    /**
     * Gets is_dynamic
     *
     * @return bool
     */
    public function getIsDynamic()
    {
        return $this->container['is_dynamic'];
    }

    /**
     * Sets is_dynamic
     *
     * @param bool $is_dynamic is_dynamic
     *
     * @return $this
     */
    public function setIsDynamic($is_dynamic)
    {
        $this->container['is_dynamic'] = $is_dynamic;

        return $this;
    }

    /**
     * Gets was_once_paused
     *
     * @return bool
     */
    public function getWasOncePaused()
    {
        return $this->container['was_once_paused'];
    }

    /**
     * Sets was_once_paused
     *
     * @param bool $was_once_paused was_once_paused
     *
     * @return $this
     */
    public function setWasOncePaused($was_once_paused)
    {
        $this->container['was_once_paused'] = $was_once_paused;

        return $this;
    }

    /**
     * Gets was_once_logged
     *
     * @return bool
     */
    public function getWasOnceLogged()
    {
        return $this->container['was_once_logged'];
    }

    /**
     * Sets was_once_logged
     *
     * @param bool $was_once_logged was_once_logged
     *
     * @return $this
     */
    public function setWasOnceLogged($was_once_logged)
    {
        $this->container['was_once_logged'] = $was_once_logged;

        return $this;
    }

    /**
     * Gets logon_start_time
     *
     * @return \DateTime
     */
    public function getLogonStartTime()
    {
        return $this->container['logon_start_time'];
    }

    /**
     * Sets logon_start_time
     *
     * @param \DateTime $logon_start_time logon_start_time
     *
     * @return $this
     */
    public function setLogonStartTime($logon_start_time)
    {
        $this->container['logon_start_time'] = $logon_start_time;

        return $this;
    }

    /**
     * Gets pause_start_time
     *
     * @return \DateTime
     */
    public function getPauseStartTime()
    {
        return $this->container['pause_start_time'];
    }

    /**
     * Sets pause_start_time
     *
     * @param \DateTime $pause_start_time pause_start_time
     *
     * @return $this
     */
    public function setPauseStartTime($pause_start_time)
    {
        $this->container['pause_start_time'] = $pause_start_time;

        return $this;
    }

    /**
     * Gets pending_call_start_time
     *
     * @return bool
     */
    public function getPendingCallStartTime()
    {
        return $this->container['pending_call_start_time'];
    }

    /**
     * Sets pending_call_start_time
     *
     * @param bool $pending_call_start_time pending_call_start_time
     *
     * @return $this
     */
    public function setPendingCallStartTime($pending_call_start_time)
    {
        $this->container['pending_call_start_time'] = $pending_call_start_time;

        return $this;
    }

    /**
     * Gets durations
     *
     * @return \Voipex\Ipbx\Model\Durations
     */
    public function getDurations()
    {
        return $this->container['durations'];
    }

    /**
     * Sets durations
     *
     * @param \Voipex\Ipbx\Model\Durations $durations durations
     *
     * @return $this
     */
    public function setDurations($durations)
    {
        $this->container['durations'] = $durations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
