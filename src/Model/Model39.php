<?php
/**
 * Model39
 *
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Voipex\Ipbx\ObjectSerializer;

/**
 * Model39 Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Model39 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Model39';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'float',
        'logged_in' => 'string[]',
        'paused_in' => 'string[]',
        'is_dynamic' => 'bool',
        'was_once_paused' => 'bool',
        'was_once_logged' => 'bool',
        'logon_start_time' => '\DateTime',
        'pause_start_time' => '\DateTime',
        'pending_call_start_time' => 'bool',
        'durations' => '\Voipex\Ipbx\Model\Durations'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'logged_in' => null,
        'paused_in' => null,
        'is_dynamic' => null,
        'was_once_paused' => null,
        'was_once_logged' => null,
        'logon_start_time' => 'date-time',
        'pause_start_time' => 'date-time',
        'pending_call_start_time' => null,
        'durations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'logged_in' => false,
        'paused_in' => false,
        'is_dynamic' => false,
        'was_once_paused' => false,
        'was_once_logged' => false,
        'logon_start_time' => false,
        'pause_start_time' => false,
        'pending_call_start_time' => false,
        'durations' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'logged_in' => 'loggedIn',
        'paused_in' => 'pausedIn',
        'is_dynamic' => 'isDynamic',
        'was_once_paused' => 'wasOncePaused',
        'was_once_logged' => 'wasOnceLogged',
        'logon_start_time' => 'logonStartTime',
        'pause_start_time' => 'pauseStartTime',
        'pending_call_start_time' => 'pendingCallStartTime',
        'durations' => 'durations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'logged_in' => 'setLoggedIn',
        'paused_in' => 'setPausedIn',
        'is_dynamic' => 'setIsDynamic',
        'was_once_paused' => 'setWasOncePaused',
        'was_once_logged' => 'setWasOnceLogged',
        'logon_start_time' => 'setLogonStartTime',
        'pause_start_time' => 'setPauseStartTime',
        'pending_call_start_time' => 'setPendingCallStartTime',
        'durations' => 'setDurations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'logged_in' => 'getLoggedIn',
        'paused_in' => 'getPausedIn',
        'is_dynamic' => 'getIsDynamic',
        'was_once_paused' => 'getWasOncePaused',
        'was_once_logged' => 'getWasOnceLogged',
        'logon_start_time' => 'getLogonStartTime',
        'pause_start_time' => 'getPauseStartTime',
        'pending_call_start_time' => 'getPendingCallStartTime',
        'durations' => 'getDurations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('logged_in', $data ?? [], null);
        $this->setIfExists('paused_in', $data ?? [], null);
        $this->setIfExists('is_dynamic', $data ?? [], null);
        $this->setIfExists('was_once_paused', $data ?? [], null);
        $this->setIfExists('was_once_logged', $data ?? [], null);
        $this->setIfExists('logon_start_time', $data ?? [], null);
        $this->setIfExists('pause_start_time', $data ?? [], null);
        $this->setIfExists('pending_call_start_time', $data ?? [], null);
        $this->setIfExists('durations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['logged_in'] === null) {
            $invalidProperties[] = "'logged_in' can't be null";
        }
        if ($this->container['paused_in'] === null) {
            $invalidProperties[] = "'paused_in' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId(): float
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId(float $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets logged_in
     *
     * @return string[]
     */
    public function getLoggedIn(): array
    {
        return $this->container['logged_in'];
    }

    /**
     * Sets logged_in
     *
     * @param string[] $logged_in logged_in
     *
     * @return $this
     */
    public function setLoggedIn(array $logged_in): static
    {
        if (is_null($logged_in)) {
            throw new InvalidArgumentException('non-nullable logged_in cannot be null');
        }
        $this->container['logged_in'] = $logged_in;

        return $this;
    }

    /**
     * Gets paused_in
     *
     * @return string[]
     */
    public function getPausedIn(): array
    {
        return $this->container['paused_in'];
    }

    /**
     * Sets paused_in
     *
     * @param string[] $paused_in paused_in
     *
     * @return $this
     */
    public function setPausedIn(array $paused_in): static
    {
        if (is_null($paused_in)) {
            throw new InvalidArgumentException('non-nullable paused_in cannot be null');
        }
        $this->container['paused_in'] = $paused_in;

        return $this;
    }

    /**
     * Gets is_dynamic
     *
     * @return bool|null
     */
    public function getIsDynamic(): ?bool
    {
        return $this->container['is_dynamic'];
    }

    /**
     * Sets is_dynamic
     *
     * @param bool|null $is_dynamic is_dynamic
     *
     * @return $this
     */
    public function setIsDynamic(?bool $is_dynamic): static
    {
        if (is_null($is_dynamic)) {
            throw new InvalidArgumentException('non-nullable is_dynamic cannot be null');
        }
        $this->container['is_dynamic'] = $is_dynamic;

        return $this;
    }

    /**
     * Gets was_once_paused
     *
     * @return bool|null
     */
    public function getWasOncePaused(): ?bool
    {
        return $this->container['was_once_paused'];
    }

    /**
     * Sets was_once_paused
     *
     * @param bool|null $was_once_paused was_once_paused
     *
     * @return $this
     */
    public function setWasOncePaused(?bool $was_once_paused): static
    {
        if (is_null($was_once_paused)) {
            throw new InvalidArgumentException('non-nullable was_once_paused cannot be null');
        }
        $this->container['was_once_paused'] = $was_once_paused;

        return $this;
    }

    /**
     * Gets was_once_logged
     *
     * @return bool|null
     */
    public function getWasOnceLogged(): ?bool
    {
        return $this->container['was_once_logged'];
    }

    /**
     * Sets was_once_logged
     *
     * @param bool|null $was_once_logged was_once_logged
     *
     * @return $this
     */
    public function setWasOnceLogged(?bool $was_once_logged): static
    {
        if (is_null($was_once_logged)) {
            throw new InvalidArgumentException('non-nullable was_once_logged cannot be null');
        }
        $this->container['was_once_logged'] = $was_once_logged;

        return $this;
    }

    /**
     * Gets logon_start_time
     *
     * @return \DateTime|null
     */
    public function getLogonStartTime(): ?\DateTime
    {
        return $this->container['logon_start_time'];
    }

    /**
     * Sets logon_start_time
     *
     * @param \DateTime|null $logon_start_time logon_start_time
     *
     * @return $this
     */
    public function setLogonStartTime(?\DateTime $logon_start_time): static
    {
        if (is_null($logon_start_time)) {
            throw new InvalidArgumentException('non-nullable logon_start_time cannot be null');
        }
        $this->container['logon_start_time'] = $logon_start_time;

        return $this;
    }

    /**
     * Gets pause_start_time
     *
     * @return \DateTime|null
     */
    public function getPauseStartTime(): ?\DateTime
    {
        return $this->container['pause_start_time'];
    }

    /**
     * Sets pause_start_time
     *
     * @param \DateTime|null $pause_start_time pause_start_time
     *
     * @return $this
     */
    public function setPauseStartTime(?\DateTime $pause_start_time): static
    {
        if (is_null($pause_start_time)) {
            throw new InvalidArgumentException('non-nullable pause_start_time cannot be null');
        }
        $this->container['pause_start_time'] = $pause_start_time;

        return $this;
    }

    /**
     * Gets pending_call_start_time
     *
     * @return bool|null
     */
    public function getPendingCallStartTime(): ?bool
    {
        return $this->container['pending_call_start_time'];
    }

    /**
     * Sets pending_call_start_time
     *
     * @param bool|null $pending_call_start_time pending_call_start_time
     *
     * @return $this
     */
    public function setPendingCallStartTime(?bool $pending_call_start_time): static
    {
        if (is_null($pending_call_start_time)) {
            throw new InvalidArgumentException('non-nullable pending_call_start_time cannot be null');
        }
        $this->container['pending_call_start_time'] = $pending_call_start_time;

        return $this;
    }

    /**
     * Gets durations
     *
     * @return \Voipex\Ipbx\Model\Durations|null
     */
    public function getDurations(): ?\Voipex\Ipbx\Model\Durations
    {
        return $this->container['durations'];
    }

    /**
     * Sets durations
     *
     * @param \Voipex\Ipbx\Model\Durations|null $durations durations
     *
     * @return $this
     */
    public function setDurations(?\Voipex\Ipbx\Model\Durations $durations): static
    {
        if (is_null($durations)) {
            throw new InvalidArgumentException('non-nullable durations cannot be null');
        }
        $this->container['durations'] = $durations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


