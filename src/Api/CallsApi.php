<?php
/**
 * CallsApi
 * PHP version 5
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * OpenAPI spec version: 1.98.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Voipex\Ipbx\ApiException;
use Voipex\Ipbx\Configuration;
use Voipex\Ipbx\HeaderSelector;
use Voipex\Ipbx\ObjectSerializer;

/**
 * CallsApi Class Doc Comment
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteCalls
     *
     * Hangup call
     *
     * @param  string $channel_id Channel ID (optional)
     * @param  string $call_id Call Id (optional)
     * @param  string $user_id User ID (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function deleteCalls($channel_id = null, $call_id = null, $user_id = null)
    {
        list($response) = $this->deleteCallsWithHttpInfo($channel_id, $call_id, $user_id);
        return $response;
    }

    /**
     * Operation deleteCallsWithHttpInfo
     *
     * Hangup call
     *
     * @param  string $channel_id Channel ID (optional)
     * @param  string $call_id Call Id (optional)
     * @param  string $user_id User ID (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallsWithHttpInfo($channel_id = null, $call_id = null, $user_id = null)
    {
        $returnType = 'string';
        $request = $this->deleteCallsRequest($channel_id, $call_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallsAsync
     *
     * Hangup call
     *
     * @param  string $channel_id Channel ID (optional)
     * @param  string $call_id Call Id (optional)
     * @param  string $user_id User ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallsAsync($channel_id = null, $call_id = null, $user_id = null)
    {
        return $this->deleteCallsAsyncWithHttpInfo($channel_id, $call_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallsAsyncWithHttpInfo
     *
     * Hangup call
     *
     * @param  string $channel_id Channel ID (optional)
     * @param  string $call_id Call Id (optional)
     * @param  string $user_id User ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallsAsyncWithHttpInfo($channel_id = null, $call_id = null, $user_id = null)
    {
        $returnType = 'string';
        $request = $this->deleteCallsRequest($channel_id, $call_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalls'
     *
     * @param  string $channel_id Channel ID (optional)
     * @param  string $call_id Call Id (optional)
     * @param  string $user_id User ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCallsRequest($channel_id = null, $call_id = null, $user_id = null)
    {

        $resourcePath = '/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($channel_id !== null) {
            $queryParams['channelId'] = ObjectSerializer::toQueryValue($channel_id, null);
        }
        // query params
        if ($call_id !== null) {
            $queryParams['callId'] = ObjectSerializer::toQueryValue($call_id, null);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCallsTransfer
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55 $body body (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function deleteCallsTransfer($body = null)
    {
        list($response) = $this->deleteCallsTransferWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteCallsTransferWithHttpInfo
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55 $body (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallsTransferWithHttpInfo($body = null)
    {
        $returnType = 'string';
        $request = $this->deleteCallsTransferRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallsTransferAsync
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallsTransferAsync($body = null)
    {
        return $this->deleteCallsTransferAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallsTransferAsyncWithHttpInfo
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCallsTransferAsyncWithHttpInfo($body = null)
    {
        $returnType = 'string';
        $request = $this->deleteCallsTransferRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCallsTransfer'
     *
     * @param  \Voipex\Ipbx\Model\Model55 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCallsTransferRequest($body = null)
    {

        $resourcePath = '/calls/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalls
     *
     * Returns list of calls
     *
     * @param  string $linkedid linkedid (optional)
     * @param  string $src src (optional)
     * @param  string $dst dst (optional)
     * @param  string $line line (optional)
     * @param  string $trunk trunk (optional)
     * @param  string $phone_number phone_number (optional)
     * @param  float[][] $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[] $teams Array of team ID to filter (optional)
     * @param  string[] $extensions Array of extensions to filter (optional)
     * @param  bool $metadata Add metadata to call (category, note) (optional)
     * @param  string $disposition disposition (optional)
     * @param  string $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float $page page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $src_filter src_filter (optional, default to equal)
     * @param  string $dst_filter dst_filter (optional, default to equal)
     * @param  string $line_filter line_filter (optional, default to equal)
     * @param  string $trunk_filter trunk_filter (optional, default to equal)
     * @param  string $phone_number_filter phone_number_filter (optional, default to equal)
     * @param  string $sort_column Enter column name for sorting (optional)
     * @param  string $sort_direction Enter sort direction (optional, default to asc)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model3
     */
    public function getCalls($linkedid = null, $src = null, $dst = null, $line = null, $trunk = null, $phone_number = null, $categories = null, $teams = null, $extensions = null, $metadata = null, $disposition = null, $way = null, $page = '1', $page_size = '100', $start_time = null, $end_time = null, $src_filter = 'equal', $dst_filter = 'equal', $line_filter = 'equal', $trunk_filter = 'equal', $phone_number_filter = 'equal', $sort_column = null, $sort_direction = 'asc', $timezone = 'Europe/Prague')
    {
        list($response) = $this->getCallsWithHttpInfo($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone);
        return $response;
    }

    /**
     * Operation getCallsWithHttpInfo
     *
     * Returns list of calls
     *
     * @param  string $linkedid (optional)
     * @param  string $src (optional)
     * @param  string $dst (optional)
     * @param  string $line (optional)
     * @param  string $trunk (optional)
     * @param  string $phone_number (optional)
     * @param  float[][] $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[] $teams Array of team ID to filter (optional)
     * @param  string[] $extensions Array of extensions to filter (optional)
     * @param  bool $metadata Add metadata to call (category, note) (optional)
     * @param  string $disposition (optional)
     * @param  string $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $src_filter (optional, default to equal)
     * @param  string $dst_filter (optional, default to equal)
     * @param  string $line_filter (optional, default to equal)
     * @param  string $trunk_filter (optional, default to equal)
     * @param  string $phone_number_filter (optional, default to equal)
     * @param  string $sort_column Enter column name for sorting (optional)
     * @param  string $sort_direction Enter sort direction (optional, default to asc)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsWithHttpInfo($linkedid = null, $src = null, $dst = null, $line = null, $trunk = null, $phone_number = null, $categories = null, $teams = null, $extensions = null, $metadata = null, $disposition = null, $way = null, $page = '1', $page_size = '100', $start_time = null, $end_time = null, $src_filter = 'equal', $dst_filter = 'equal', $line_filter = 'equal', $trunk_filter = 'equal', $phone_number_filter = 'equal', $sort_column = null, $sort_direction = 'asc', $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model3';
        $request = $this->getCallsRequest($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsAsync
     *
     * Returns list of calls
     *
     * @param  string $linkedid (optional)
     * @param  string $src (optional)
     * @param  string $dst (optional)
     * @param  string $line (optional)
     * @param  string $trunk (optional)
     * @param  string $phone_number (optional)
     * @param  float[][] $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[] $teams Array of team ID to filter (optional)
     * @param  string[] $extensions Array of extensions to filter (optional)
     * @param  bool $metadata Add metadata to call (category, note) (optional)
     * @param  string $disposition (optional)
     * @param  string $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $src_filter (optional, default to equal)
     * @param  string $dst_filter (optional, default to equal)
     * @param  string $line_filter (optional, default to equal)
     * @param  string $trunk_filter (optional, default to equal)
     * @param  string $phone_number_filter (optional, default to equal)
     * @param  string $sort_column Enter column name for sorting (optional)
     * @param  string $sort_direction Enter sort direction (optional, default to asc)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsAsync($linkedid = null, $src = null, $dst = null, $line = null, $trunk = null, $phone_number = null, $categories = null, $teams = null, $extensions = null, $metadata = null, $disposition = null, $way = null, $page = '1', $page_size = '100', $start_time = null, $end_time = null, $src_filter = 'equal', $dst_filter = 'equal', $line_filter = 'equal', $trunk_filter = 'equal', $phone_number_filter = 'equal', $sort_column = null, $sort_direction = 'asc', $timezone = 'Europe/Prague')
    {
        return $this->getCallsAsyncWithHttpInfo($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsAsyncWithHttpInfo
     *
     * Returns list of calls
     *
     * @param  string $linkedid (optional)
     * @param  string $src (optional)
     * @param  string $dst (optional)
     * @param  string $line (optional)
     * @param  string $trunk (optional)
     * @param  string $phone_number (optional)
     * @param  float[][] $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[] $teams Array of team ID to filter (optional)
     * @param  string[] $extensions Array of extensions to filter (optional)
     * @param  bool $metadata Add metadata to call (category, note) (optional)
     * @param  string $disposition (optional)
     * @param  string $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $src_filter (optional, default to equal)
     * @param  string $dst_filter (optional, default to equal)
     * @param  string $line_filter (optional, default to equal)
     * @param  string $trunk_filter (optional, default to equal)
     * @param  string $phone_number_filter (optional, default to equal)
     * @param  string $sort_column Enter column name for sorting (optional)
     * @param  string $sort_direction Enter sort direction (optional, default to asc)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsAsyncWithHttpInfo($linkedid = null, $src = null, $dst = null, $line = null, $trunk = null, $phone_number = null, $categories = null, $teams = null, $extensions = null, $metadata = null, $disposition = null, $way = null, $page = '1', $page_size = '100', $start_time = null, $end_time = null, $src_filter = 'equal', $dst_filter = 'equal', $line_filter = 'equal', $trunk_filter = 'equal', $phone_number_filter = 'equal', $sort_column = null, $sort_direction = 'asc', $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model3';
        $request = $this->getCallsRequest($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalls'
     *
     * @param  string $linkedid (optional)
     * @param  string $src (optional)
     * @param  string $dst (optional)
     * @param  string $line (optional)
     * @param  string $trunk (optional)
     * @param  string $phone_number (optional)
     * @param  float[][] $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[] $teams Array of team ID to filter (optional)
     * @param  string[] $extensions Array of extensions to filter (optional)
     * @param  bool $metadata Add metadata to call (category, note) (optional)
     * @param  string $disposition (optional)
     * @param  string $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $src_filter (optional, default to equal)
     * @param  string $dst_filter (optional, default to equal)
     * @param  string $line_filter (optional, default to equal)
     * @param  string $trunk_filter (optional, default to equal)
     * @param  string $phone_number_filter (optional, default to equal)
     * @param  string $sort_column Enter column name for sorting (optional)
     * @param  string $sort_direction Enter sort direction (optional, default to asc)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallsRequest($linkedid = null, $src = null, $dst = null, $line = null, $trunk = null, $phone_number = null, $categories = null, $teams = null, $extensions = null, $metadata = null, $disposition = null, $way = null, $page = '1', $page_size = '100', $start_time = null, $end_time = null, $src_filter = 'equal', $dst_filter = 'equal', $line_filter = 'equal', $trunk_filter = 'equal', $phone_number_filter = 'equal', $sort_column = null, $sort_direction = 'asc', $timezone = 'Europe/Prague')
    {

        $resourcePath = '/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($linkedid !== null) {
            $queryParams['linkedid'] = ObjectSerializer::toQueryValue($linkedid, null);
        }
        // query params
        if ($src !== null) {
            $queryParams['src'] = ObjectSerializer::toQueryValue($src, null);
        }
        // query params
        if ($dst !== null) {
            $queryParams['dst'] = ObjectSerializer::toQueryValue($dst, null);
        }
        // query params
        if ($line !== null) {
            $queryParams['line'] = ObjectSerializer::toQueryValue($line, null);
        }
        // query params
        if ($trunk !== null) {
            $queryParams['trunk'] = ObjectSerializer::toQueryValue($trunk, null);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['phoneNumber'] = ObjectSerializer::toQueryValue($phone_number, null);
        }
        // query params
        if (is_array($categories)) {
            $categories = ObjectSerializer::serializeCollection($categories, 'multi', true);
        }
        if ($categories !== null) {
            $queryParams['categories'] = ObjectSerializer::toQueryValue($categories, null);
        }
        // query params
        if (is_array($teams)) {
            $teams = ObjectSerializer::serializeCollection($teams, 'multi', true);
        }
        if ($teams !== null) {
            $queryParams['teams'] = ObjectSerializer::toQueryValue($teams, null);
        }
        // query params
        if (is_array($extensions)) {
            $extensions = ObjectSerializer::serializeCollection($extensions, 'multi', true);
        }
        if ($extensions !== null) {
            $queryParams['extensions'] = ObjectSerializer::toQueryValue($extensions, null);
        }
        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }
        // query params
        if ($disposition !== null) {
            $queryParams['disposition'] = ObjectSerializer::toQueryValue($disposition, null);
        }
        // query params
        if ($way !== null) {
            $queryParams['way'] = ObjectSerializer::toQueryValue($way, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time, 'date-time');
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time, 'date-time');
        }
        // query params
        if ($src_filter !== null) {
            $queryParams['srcFilter'] = ObjectSerializer::toQueryValue($src_filter, null);
        }
        // query params
        if ($dst_filter !== null) {
            $queryParams['dstFilter'] = ObjectSerializer::toQueryValue($dst_filter, null);
        }
        // query params
        if ($line_filter !== null) {
            $queryParams['lineFilter'] = ObjectSerializer::toQueryValue($line_filter, null);
        }
        // query params
        if ($trunk_filter !== null) {
            $queryParams['trunkFilter'] = ObjectSerializer::toQueryValue($trunk_filter, null);
        }
        // query params
        if ($phone_number_filter !== null) {
            $queryParams['phoneNumberFilter'] = ObjectSerializer::toQueryValue($phone_number_filter, null);
        }
        // query params
        if ($sort_column !== null) {
            $queryParams['sortColumn'] = ObjectSerializer::toQueryValue($sort_column, null);
        }
        // query params
        if ($sort_direction !== null) {
            $queryParams['sortDirection'] = ObjectSerializer::toQueryValue($sort_direction, null);
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = ObjectSerializer::toQueryValue($timezone, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCallidDetail
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model31
     */
    public function getCallsCallidDetail($call_id, $pbx_id = null, $timezone = 'Europe/Prague')
    {
        list($response) = $this->getCallsCallidDetailWithHttpInfo($call_id, $pbx_id, $timezone);
        return $response;
    }

    /**
     * Operation getCallsCallidDetailWithHttpInfo
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model31, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCallidDetailWithHttpInfo($call_id, $pbx_id = null, $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model31';
        $request = $this->getCallsCallidDetailRequest($call_id, $pbx_id, $timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model31',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCallidDetailAsync
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCallidDetailAsync($call_id, $pbx_id = null, $timezone = 'Europe/Prague')
    {
        return $this->getCallsCallidDetailAsyncWithHttpInfo($call_id, $pbx_id, $timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCallidDetailAsyncWithHttpInfo
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCallidDetailAsyncWithHttpInfo($call_id, $pbx_id = null, $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model31';
        $request = $this->getCallsCallidDetailRequest($call_id, $pbx_id, $timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCallidDetail'
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallsCallidDetailRequest($call_id, $pbx_id = null, $timezone = 'Europe/Prague')
    {
        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_id when calling getCallsCallidDetail'
            );
        }

        $resourcePath = '/calls/{callId}/detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pbx_id !== null) {
            $queryParams['pbxId'] = ObjectSerializer::toQueryValue($pbx_id, null);
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = ObjectSerializer::toQueryValue($timezone, null);
        }

        // path params
        if ($call_id !== null) {
            $resourcePath = str_replace(
                '{' . 'callId' . '}',
                ObjectSerializer::toPathValue($call_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCallidRecordings
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string[] $extensions extensions (optional, default to ["mp3"])
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model29
     */
    public function getCallsCallidRecordings($call_id, $pbx_id = null, $extensions = '["mp3"]')
    {
        list($response) = $this->getCallsCallidRecordingsWithHttpInfo($call_id, $pbx_id, $extensions);
        return $response;
    }

    /**
     * Operation getCallsCallidRecordingsWithHttpInfo
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string[] $extensions (optional, default to ["mp3"])
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model29, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCallidRecordingsWithHttpInfo($call_id, $pbx_id = null, $extensions = '["mp3"]')
    {
        $returnType = '\Voipex\Ipbx\Model\Model29';
        $request = $this->getCallsCallidRecordingsRequest($call_id, $pbx_id, $extensions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model29',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCallidRecordingsAsync
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string[] $extensions (optional, default to ["mp3"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCallidRecordingsAsync($call_id, $pbx_id = null, $extensions = '["mp3"]')
    {
        return $this->getCallsCallidRecordingsAsyncWithHttpInfo($call_id, $pbx_id, $extensions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCallidRecordingsAsyncWithHttpInfo
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string[] $extensions (optional, default to ["mp3"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCallidRecordingsAsyncWithHttpInfo($call_id, $pbx_id = null, $extensions = '["mp3"]')
    {
        $returnType = '\Voipex\Ipbx\Model\Model29';
        $request = $this->getCallsCallidRecordingsRequest($call_id, $pbx_id, $extensions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCallidRecordings'
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float $pbx_id Pbx id (optional)
     * @param  string[] $extensions (optional, default to ["mp3"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallsCallidRecordingsRequest($call_id, $pbx_id = null, $extensions = '["mp3"]')
    {
        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_id when calling getCallsCallidRecordings'
            );
        }

        $resourcePath = '/calls/{callId}/recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pbx_id !== null) {
            $queryParams['pbxId'] = ObjectSerializer::toQueryValue($pbx_id, null);
        }
        // query params
        if (is_array($extensions)) {
            $extensions = ObjectSerializer::serializeCollection($extensions, 'multi', true);
        }
        if ($extensions !== null) {
            $queryParams['extensions'] = ObjectSerializer::toQueryValue($extensions, null);
        }

        // path params
        if ($call_id !== null) {
            $resourcePath = str_replace(
                '{' . 'callId' . '}',
                ObjectSerializer::toPathValue($call_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCallidTranscript
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float $pbx_id PBX ID (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model34
     */
    public function getCallsCallidTranscript($call_id, $pbx_id = null)
    {
        list($response) = $this->getCallsCallidTranscriptWithHttpInfo($call_id, $pbx_id);
        return $response;
    }

    /**
     * Operation getCallsCallidTranscriptWithHttpInfo
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float $pbx_id PBX ID (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model34, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCallidTranscriptWithHttpInfo($call_id, $pbx_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model34';
        $request = $this->getCallsCallidTranscriptRequest($call_id, $pbx_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model34',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCallidTranscriptAsync
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float $pbx_id PBX ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCallidTranscriptAsync($call_id, $pbx_id = null)
    {
        return $this->getCallsCallidTranscriptAsyncWithHttpInfo($call_id, $pbx_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCallidTranscriptAsyncWithHttpInfo
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float $pbx_id PBX ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCallidTranscriptAsyncWithHttpInfo($call_id, $pbx_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model34';
        $request = $this->getCallsCallidTranscriptRequest($call_id, $pbx_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCallidTranscript'
     *
     * @param  string $call_id Call ID (required)
     * @param  float $pbx_id PBX ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallsCallidTranscriptRequest($call_id, $pbx_id = null)
    {
        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_id when calling getCallsCallidTranscript'
            );
        }

        $resourcePath = '/calls/{callId}/transcript';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pbx_id !== null) {
            $queryParams['pbxId'] = ObjectSerializer::toQueryValue($pbx_id, null);
        }

        // path params
        if ($call_id !== null) {
            $resourcePath = str_replace(
                '{' . 'callId' . '}',
                ObjectSerializer::toPathValue($call_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCurrent
     *
     * Return current calls
     *
     * @param  float $pbx_id PBX ID (optional)
     * @param  string $user_id User Id (optional)
     * @param  string $user_login User login (optional)
     * @param  string $call_id Call id (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model16
     */
    public function getCallsCurrent($pbx_id = null, $user_id = null, $user_login = null, $call_id = null)
    {
        list($response) = $this->getCallsCurrentWithHttpInfo($pbx_id, $user_id, $user_login, $call_id);
        return $response;
    }

    /**
     * Operation getCallsCurrentWithHttpInfo
     *
     * Return current calls
     *
     * @param  float $pbx_id PBX ID (optional)
     * @param  string $user_id User Id (optional)
     * @param  string $user_login User login (optional)
     * @param  string $call_id Call id (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model16, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCurrentWithHttpInfo($pbx_id = null, $user_id = null, $user_login = null, $call_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model16';
        $request = $this->getCallsCurrentRequest($pbx_id, $user_id, $user_login, $call_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model16',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCurrentAsync
     *
     * Return current calls
     *
     * @param  float $pbx_id PBX ID (optional)
     * @param  string $user_id User Id (optional)
     * @param  string $user_login User login (optional)
     * @param  string $call_id Call id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCurrentAsync($pbx_id = null, $user_id = null, $user_login = null, $call_id = null)
    {
        return $this->getCallsCurrentAsyncWithHttpInfo($pbx_id, $user_id, $user_login, $call_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCurrentAsyncWithHttpInfo
     *
     * Return current calls
     *
     * @param  float $pbx_id PBX ID (optional)
     * @param  string $user_id User Id (optional)
     * @param  string $user_login User login (optional)
     * @param  string $call_id Call id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsCurrentAsyncWithHttpInfo($pbx_id = null, $user_id = null, $user_login = null, $call_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model16';
        $request = $this->getCallsCurrentRequest($pbx_id, $user_id, $user_login, $call_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCurrent'
     *
     * @param  float $pbx_id PBX ID (optional)
     * @param  string $user_id User Id (optional)
     * @param  string $user_login User login (optional)
     * @param  string $call_id Call id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallsCurrentRequest($pbx_id = null, $user_id = null, $user_login = null, $call_id = null)
    {

        $resourcePath = '/calls/current';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pbx_id !== null) {
            $queryParams['pbxId'] = ObjectSerializer::toQueryValue($pbx_id, null);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id, null);
        }
        // query params
        if ($user_login !== null) {
            $queryParams['userLogin'] = ObjectSerializer::toQueryValue($user_login, null);
        }
        // query params
        if ($call_id !== null) {
            $queryParams['callId'] = ObjectSerializer::toQueryValue($call_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsMissed
     *
     * Missed and abandoned calls from the call center queues.
     *
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model19
     */
    public function getCallsMissed()
    {
        list($response) = $this->getCallsMissedWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCallsMissedWithHttpInfo
     *
     * Missed and abandoned calls from the call center queues.
     *
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model19, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsMissedWithHttpInfo()
    {
        $returnType = '\Voipex\Ipbx\Model\Model19';
        $request = $this->getCallsMissedRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model19',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsMissedAsync
     *
     * Missed and abandoned calls from the call center queues.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsMissedAsync()
    {
        return $this->getCallsMissedAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsMissedAsyncWithHttpInfo
     *
     * Missed and abandoned calls from the call center queues.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsMissedAsyncWithHttpInfo()
    {
        $returnType = '\Voipex\Ipbx\Model\Model19';
        $request = $this->getCallsMissedRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsMissed'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallsMissedRequest()
    {

        $resourcePath = '/calls/missed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsTransferDestinations
     *
     * List of destinations for a transferred call.
     *
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model27
     */
    public function getCallsTransferDestinations()
    {
        list($response) = $this->getCallsTransferDestinationsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCallsTransferDestinationsWithHttpInfo
     *
     * List of destinations for a transferred call.
     *
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model27, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsTransferDestinationsWithHttpInfo()
    {
        $returnType = '\Voipex\Ipbx\Model\Model27';
        $request = $this->getCallsTransferDestinationsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model27',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsTransferDestinationsAsync
     *
     * List of destinations for a transferred call.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsTransferDestinationsAsync()
    {
        return $this->getCallsTransferDestinationsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsTransferDestinationsAsyncWithHttpInfo
     *
     * List of destinations for a transferred call.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallsTransferDestinationsAsyncWithHttpInfo()
    {
        $returnType = '\Voipex\Ipbx\Model\Model27';
        $request = $this->getCallsTransferDestinationsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsTransferDestinations'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCallsTransferDestinationsRequest()
    {

        $resourcePath = '/calls/transfer/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCalls
     *
     * Create new call
     *
     * @param  \Voipex\Ipbx\Model\Model50 $body body (optional)
     * @param  float $pbx_id pbx_id (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model51
     */
    public function postCalls($body = null, $pbx_id = null)
    {
        list($response) = $this->postCallsWithHttpInfo($body, $pbx_id);
        return $response;
    }

    /**
     * Operation postCallsWithHttpInfo
     *
     * Create new call
     *
     * @param  \Voipex\Ipbx\Model\Model50 $body (optional)
     * @param  float $pbx_id (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model51, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCallsWithHttpInfo($body = null, $pbx_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model51';
        $request = $this->postCallsRequest($body, $pbx_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model51',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCallsAsync
     *
     * Create new call
     *
     * @param  \Voipex\Ipbx\Model\Model50 $body (optional)
     * @param  float $pbx_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallsAsync($body = null, $pbx_id = null)
    {
        return $this->postCallsAsyncWithHttpInfo($body, $pbx_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCallsAsyncWithHttpInfo
     *
     * Create new call
     *
     * @param  \Voipex\Ipbx\Model\Model50 $body (optional)
     * @param  float $pbx_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallsAsyncWithHttpInfo($body = null, $pbx_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model51';
        $request = $this->postCallsRequest($body, $pbx_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCalls'
     *
     * @param  \Voipex\Ipbx\Model\Model50 $body (optional)
     * @param  float $pbx_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCallsRequest($body = null, $pbx_id = null)
    {

        $resourcePath = '/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pbx_id !== null) {
            $queryParams['pbxId'] = ObjectSerializer::toQueryValue($pbx_id, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallsMonitor
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string $type Spy or whisper (optional, default to spy)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model43
     */
    public function putCallsMonitor($channel_id, $user_id = null, $type = 'spy')
    {
        list($response) = $this->putCallsMonitorWithHttpInfo($channel_id, $user_id, $type);
        return $response;
    }

    /**
     * Operation putCallsMonitorWithHttpInfo
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string $type Spy or whisper (optional, default to spy)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model43, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallsMonitorWithHttpInfo($channel_id, $user_id = null, $type = 'spy')
    {
        $returnType = '\Voipex\Ipbx\Model\Model43';
        $request = $this->putCallsMonitorRequest($channel_id, $user_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallsMonitorAsync
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string $type Spy or whisper (optional, default to spy)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallsMonitorAsync($channel_id, $user_id = null, $type = 'spy')
    {
        return $this->putCallsMonitorAsyncWithHttpInfo($channel_id, $user_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallsMonitorAsyncWithHttpInfo
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string $type Spy or whisper (optional, default to spy)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallsMonitorAsyncWithHttpInfo($channel_id, $user_id = null, $type = 'spy')
    {
        $returnType = '\Voipex\Ipbx\Model\Model43';
        $request = $this->putCallsMonitorRequest($channel_id, $user_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallsMonitor'
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string $type Spy or whisper (optional, default to spy)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCallsMonitorRequest($channel_id, $user_id = null, $type = 'spy')
    {
        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling putCallsMonitor'
            );
        }

        $resourcePath = '/calls/monitor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($channel_id !== null) {
            $queryParams['channelId'] = ObjectSerializer::toQueryValue($channel_id, null);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallsTransfer
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45 $body body (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function putCallsTransfer($body = null)
    {
        list($response) = $this->putCallsTransferWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation putCallsTransferWithHttpInfo
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45 $body (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallsTransferWithHttpInfo($body = null)
    {
        $returnType = 'string';
        $request = $this->putCallsTransferRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallsTransferAsync
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallsTransferAsync($body = null)
    {
        return $this->putCallsTransferAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallsTransferAsyncWithHttpInfo
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCallsTransferAsyncWithHttpInfo($body = null)
    {
        $returnType = 'string';
        $request = $this->putCallsTransferRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallsTransfer'
     *
     * @param  \Voipex\Ipbx\Model\Model45 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putCallsTransferRequest($body = null)
    {

        $resourcePath = '/calls/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
