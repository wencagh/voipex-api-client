<?php
/**
 * CallsApi
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Voipex\Ipbx\ApiException;
use Voipex\Ipbx\Configuration;
use Voipex\Ipbx\HeaderSelector;
use Voipex\Ipbx\ObjectSerializer;

/**
 * CallsApi Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CallsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteCalls' => [
            'application/json',
        ],
        'deleteCallsTransfer' => [
            'application/json',
        ],
        'getCalls' => [
            'application/json',
        ],
        'getCallsCallidDetail' => [
            'application/json',
        ],
        'getCallsCallidRecordings' => [
            'application/json',
        ],
        'getCallsCallidTranscript' => [
            'application/json',
        ],
        'getCallsCurrent' => [
            'application/json',
        ],
        'getCallsMissed' => [
            'application/json',
        ],
        'getCallsTransferDestinations' => [
            'application/json',
        ],
        'postCalls' => [
            'application/json',
        ],
        'putCallsMonitor' => [
            'application/json',
        ],
        'putCallsTransfer' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation deleteCalls
     *
     * Hangup call
     *
     * @param  string|null $channel_id Channel ID (optional)
     * @param  string|null $call_id Call Id (optional)
     * @param  string|null $user_id User ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function deleteCalls(
        ?string $channel_id = null,
        ?string $call_id = null,
        ?string $user_id = null,
        string $contentType = self::contentTypes['deleteCalls'][0]
    ): string
    {
        list($response) = $this->deleteCallsWithHttpInfo($channel_id, $call_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteCallsWithHttpInfo
     *
     * Hangup call
     *
     * @param  string|null $channel_id Channel ID (optional)
     * @param  string|null $call_id Call Id (optional)
     * @param  string|null $user_id User ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallsWithHttpInfo(
        ?string $channel_id = null,
        ?string $call_id = null,
        ?string $user_id = null,
        string $contentType = self::contentTypes['deleteCalls'][0]
    ): array
    {
        $request = $this->deleteCallsRequest($channel_id, $call_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                default:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallsAsync
     *
     * Hangup call
     *
     * @param  string|null $channel_id Channel ID (optional)
     * @param  string|null $call_id Call Id (optional)
     * @param  string|null $user_id User ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCallsAsync(
        ?string $channel_id = null,
        ?string $call_id = null,
        ?string $user_id = null,
        string $contentType = self::contentTypes['deleteCalls'][0]
    ): PromiseInterface
    {
        return $this->deleteCallsAsyncWithHttpInfo($channel_id, $call_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallsAsyncWithHttpInfo
     *
     * Hangup call
     *
     * @param  string|null $channel_id Channel ID (optional)
     * @param  string|null $call_id Call Id (optional)
     * @param  string|null $user_id User ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCallsAsyncWithHttpInfo(
        ?string $channel_id = null,
        ?string $call_id = null,
        ?string $user_id = null,
        string $contentType = self::contentTypes['deleteCalls'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->deleteCallsRequest($channel_id, $call_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalls'
     *
     * @param  string|null $channel_id Channel ID (optional)
     * @param  string|null $call_id Call Id (optional)
     * @param  string|null $user_id User ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCallsRequest(
        ?string $channel_id = null,
        ?string $call_id = null,
        ?string $user_id = null,
        string $contentType = self::contentTypes['deleteCalls'][0]
    ): Request
    {





        $resourcePath = '/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_id,
            'channelId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $call_id,
            'callId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCallsTransfer
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55|null $model55 model55 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCallsTransfer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function deleteCallsTransfer(
        ?\Voipex\Ipbx\Model\Model55 $model55 = null,
        string $contentType = self::contentTypes['deleteCallsTransfer'][0]
    ): string
    {
        list($response) = $this->deleteCallsTransferWithHttpInfo($model55, $contentType);
        return $response;
    }

    /**
     * Operation deleteCallsTransferWithHttpInfo
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55|null $model55 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCallsTransfer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCallsTransferWithHttpInfo(
        ?\Voipex\Ipbx\Model\Model55 $model55 = null,
        string $contentType = self::contentTypes['deleteCallsTransfer'][0]
    ): array
    {
        $request = $this->deleteCallsTransferRequest($model55, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                default:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCallsTransferAsync
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55|null $model55 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCallsTransfer'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCallsTransferAsync(
        ?\Voipex\Ipbx\Model\Model55 $model55 = null,
        string $contentType = self::contentTypes['deleteCallsTransfer'][0]
    ): PromiseInterface
    {
        return $this->deleteCallsTransferAsyncWithHttpInfo($model55, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCallsTransferAsyncWithHttpInfo
     *
     * Cancel an attended transfer
     *
     * @param  \Voipex\Ipbx\Model\Model55|null $model55 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCallsTransfer'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCallsTransferAsyncWithHttpInfo(
        ?\Voipex\Ipbx\Model\Model55 $model55 = null,
        string $contentType = self::contentTypes['deleteCallsTransfer'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->deleteCallsTransferRequest($model55, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCallsTransfer'
     *
     * @param  \Voipex\Ipbx\Model\Model55|null $model55 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCallsTransfer'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCallsTransferRequest(
        ?\Voipex\Ipbx\Model\Model55 $model55 = null,
        string $contentType = self::contentTypes['deleteCallsTransfer'][0]
    ): Request
    {



        $resourcePath = '/calls/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model55)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model55));
            } else {
                $httpBody = $model55;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalls
     *
     * Returns list of calls
     *
     * @param  string|null $linkedid linkedid (optional)
     * @param  string|null $src src (optional)
     * @param  string|null $dst dst (optional)
     * @param  string|null $line line (optional)
     * @param  string|null $trunk trunk (optional)
     * @param  string|null $phone_number phone_number (optional)
     * @param  float[][]|null $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[]|null $teams Array of team ID to filter (optional)
     * @param  string[]|null $extensions Array of extensions to filter (optional)
     * @param  bool|null $metadata Add metadata to call (category, note) (optional)
     * @param  string|null $disposition disposition (optional)
     * @param  string|null $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float|null $page page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $src_filter src_filter (optional, default to 'equal')
     * @param  string|null $dst_filter dst_filter (optional, default to 'equal')
     * @param  string|null $line_filter line_filter (optional, default to 'equal')
     * @param  string|null $trunk_filter trunk_filter (optional, default to 'equal')
     * @param  string|null $phone_number_filter phone_number_filter (optional, default to 'equal')
     * @param  string|null $sort_column Enter column name for sorting (optional)
     * @param  string|null $sort_direction Enter sort direction (optional, default to 'asc')
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model3
     */
    public function getCalls(
        ?string $linkedid = null,
        ?string $src = null,
        ?string $dst = null,
        ?string $line = null,
        ?string $trunk = null,
        ?string $phone_number = null,
        array $categories = null,
        array $teams = null,
        array $extensions = null,
        ?bool $metadata = null,
        ?string $disposition = null,
        ?string $way = null,
        ?float $page = 1,
        ?float $page_size = 100,
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $src_filter = 'equal',
        ?string $dst_filter = 'equal',
        ?string $line_filter = 'equal',
        ?string $trunk_filter = 'equal',
        ?string $phone_number_filter = 'equal',
        ?string $sort_column = null,
        ?string $sort_direction = 'asc',
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCalls'][0]
    ): \Voipex\Ipbx\Model\Model3
    {
        list($response) = $this->getCallsWithHttpInfo($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone, $contentType);
        return $response;
    }

    /**
     * Operation getCallsWithHttpInfo
     *
     * Returns list of calls
     *
     * @param  string|null $linkedid (optional)
     * @param  string|null $src (optional)
     * @param  string|null $dst (optional)
     * @param  string|null $line (optional)
     * @param  string|null $trunk (optional)
     * @param  string|null $phone_number (optional)
     * @param  float[][]|null $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[]|null $teams Array of team ID to filter (optional)
     * @param  string[]|null $extensions Array of extensions to filter (optional)
     * @param  bool|null $metadata Add metadata to call (category, note) (optional)
     * @param  string|null $disposition (optional)
     * @param  string|null $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $src_filter (optional, default to 'equal')
     * @param  string|null $dst_filter (optional, default to 'equal')
     * @param  string|null $line_filter (optional, default to 'equal')
     * @param  string|null $trunk_filter (optional, default to 'equal')
     * @param  string|null $phone_number_filter (optional, default to 'equal')
     * @param  string|null $sort_column Enter column name for sorting (optional)
     * @param  string|null $sort_direction Enter sort direction (optional, default to 'asc')
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsWithHttpInfo(
        ?string $linkedid = null,
        ?string $src = null,
        ?string $dst = null,
        ?string $line = null,
        ?string $trunk = null,
        ?string $phone_number = null,
        array $categories = null,
        array $teams = null,
        array $extensions = null,
        ?bool $metadata = null,
        ?string $disposition = null,
        ?string $way = null,
        ?float $page = 1,
        ?float $page_size = 100,
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $src_filter = 'equal',
        ?string $dst_filter = 'equal',
        ?string $line_filter = 'equal',
        ?string $trunk_filter = 'equal',
        ?string $phone_number_filter = 'equal',
        ?string $sort_column = null,
        ?string $sort_direction = 'asc',
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCalls'][0]
    ): array
    {
        $request = $this->getCallsRequest($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model3', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model3' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model3', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model3';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsAsync
     *
     * Returns list of calls
     *
     * @param  string|null $linkedid (optional)
     * @param  string|null $src (optional)
     * @param  string|null $dst (optional)
     * @param  string|null $line (optional)
     * @param  string|null $trunk (optional)
     * @param  string|null $phone_number (optional)
     * @param  float[][]|null $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[]|null $teams Array of team ID to filter (optional)
     * @param  string[]|null $extensions Array of extensions to filter (optional)
     * @param  bool|null $metadata Add metadata to call (category, note) (optional)
     * @param  string|null $disposition (optional)
     * @param  string|null $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $src_filter (optional, default to 'equal')
     * @param  string|null $dst_filter (optional, default to 'equal')
     * @param  string|null $line_filter (optional, default to 'equal')
     * @param  string|null $trunk_filter (optional, default to 'equal')
     * @param  string|null $phone_number_filter (optional, default to 'equal')
     * @param  string|null $sort_column Enter column name for sorting (optional)
     * @param  string|null $sort_direction Enter sort direction (optional, default to 'asc')
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsAsync(
        ?string $linkedid = null,
        ?string $src = null,
        ?string $dst = null,
        ?string $line = null,
        ?string $trunk = null,
        ?string $phone_number = null,
        array $categories = null,
        array $teams = null,
        array $extensions = null,
        ?bool $metadata = null,
        ?string $disposition = null,
        ?string $way = null,
        ?float $page = 1,
        ?float $page_size = 100,
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $src_filter = 'equal',
        ?string $dst_filter = 'equal',
        ?string $line_filter = 'equal',
        ?string $trunk_filter = 'equal',
        ?string $phone_number_filter = 'equal',
        ?string $sort_column = null,
        ?string $sort_direction = 'asc',
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCalls'][0]
    ): PromiseInterface
    {
        return $this->getCallsAsyncWithHttpInfo($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsAsyncWithHttpInfo
     *
     * Returns list of calls
     *
     * @param  string|null $linkedid (optional)
     * @param  string|null $src (optional)
     * @param  string|null $dst (optional)
     * @param  string|null $line (optional)
     * @param  string|null $trunk (optional)
     * @param  string|null $phone_number (optional)
     * @param  float[][]|null $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[]|null $teams Array of team ID to filter (optional)
     * @param  string[]|null $extensions Array of extensions to filter (optional)
     * @param  bool|null $metadata Add metadata to call (category, note) (optional)
     * @param  string|null $disposition (optional)
     * @param  string|null $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $src_filter (optional, default to 'equal')
     * @param  string|null $dst_filter (optional, default to 'equal')
     * @param  string|null $line_filter (optional, default to 'equal')
     * @param  string|null $trunk_filter (optional, default to 'equal')
     * @param  string|null $phone_number_filter (optional, default to 'equal')
     * @param  string|null $sort_column Enter column name for sorting (optional)
     * @param  string|null $sort_direction Enter sort direction (optional, default to 'asc')
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsAsyncWithHttpInfo(
        ?string $linkedid = null,
        ?string $src = null,
        ?string $dst = null,
        ?string $line = null,
        ?string $trunk = null,
        ?string $phone_number = null,
        array $categories = null,
        array $teams = null,
        array $extensions = null,
        ?bool $metadata = null,
        ?string $disposition = null,
        ?string $way = null,
        ?float $page = 1,
        ?float $page_size = 100,
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $src_filter = 'equal',
        ?string $dst_filter = 'equal',
        ?string $line_filter = 'equal',
        ?string $trunk_filter = 'equal',
        ?string $phone_number_filter = 'equal',
        ?string $sort_column = null,
        ?string $sort_direction = 'asc',
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCalls'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model3';
        $request = $this->getCallsRequest($linkedid, $src, $dst, $line, $trunk, $phone_number, $categories, $teams, $extensions, $metadata, $disposition, $way, $page, $page_size, $start_time, $end_time, $src_filter, $dst_filter, $line_filter, $trunk_filter, $phone_number_filter, $sort_column, $sort_direction, $timezone, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalls'
     *
     * @param  string|null $linkedid (optional)
     * @param  string|null $src (optional)
     * @param  string|null $dst (optional)
     * @param  string|null $line (optional)
     * @param  string|null $trunk (optional)
     * @param  string|null $phone_number (optional)
     * @param  float[][]|null $categories Nested array of call category ID to filter. Example: [[1,2] , [3]] &#x3D;&gt; (1 or 2) and 3 (optional)
     * @param  float[]|null $teams Array of team ID to filter (optional)
     * @param  string[]|null $extensions Array of extensions to filter (optional)
     * @param  bool|null $metadata Add metadata to call (category, note) (optional)
     * @param  string|null $disposition (optional)
     * @param  string|null $way Call direction (Loc - local, In - incoming, Out - outgoing) (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 100)
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $src_filter (optional, default to 'equal')
     * @param  string|null $dst_filter (optional, default to 'equal')
     * @param  string|null $line_filter (optional, default to 'equal')
     * @param  string|null $trunk_filter (optional, default to 'equal')
     * @param  string|null $phone_number_filter (optional, default to 'equal')
     * @param  string|null $sort_column Enter column name for sorting (optional)
     * @param  string|null $sort_direction Enter sort direction (optional, default to 'asc')
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallsRequest(
        ?string $linkedid = null,
        ?string $src = null,
        ?string $dst = null,
        ?string $line = null,
        ?string $trunk = null,
        ?string $phone_number = null,
        array $categories = null,
        array $teams = null,
        array $extensions = null,
        ?bool $metadata = null,
        ?string $disposition = null,
        ?string $way = null,
        ?float $page = 1,
        ?float $page_size = 100,
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $src_filter = 'equal',
        ?string $dst_filter = 'equal',
        ?string $line_filter = 'equal',
        ?string $trunk_filter = 'equal',
        ?string $phone_number_filter = 'equal',
        ?string $sort_column = null,
        ?string $sort_direction = 'asc',
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCalls'][0]
    ): Request
    {














        if ($page_size !== null && $page_size > 5000) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling CallsApi.getCalls, must be smaller than or equal to 5000.');
        }
        











        $resourcePath = '/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $linkedid,
            'linkedid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src,
            'src', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst,
            'dst', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $line,
            'line', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trunk,
            'trunk', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone_number,
            'phoneNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categories,
            'categories', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $teams,
            'teams', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $extensions,
            'extensions', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disposition,
            'disposition', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $way,
            'way', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_filter,
            'srcFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst_filter,
            'dstFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $line_filter,
            'lineFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trunk_filter,
            'trunkFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone_number_filter,
            'phoneNumberFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_column,
            'sortColumn', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_direction,
            'sortDirection', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCallidDetail
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidDetail'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model30[]
     */
    public function getCallsCallidDetail(
        string $call_id,
        ?float $pbx_id = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCallsCallidDetail'][0]
    ): array
    {
        list($response) = $this->getCallsCallidDetailWithHttpInfo($call_id, $pbx_id, $timezone, $contentType);
        return $response;
    }

    /**
     * Operation getCallsCallidDetailWithHttpInfo
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidDetail'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model30[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCallidDetailWithHttpInfo(
        string $call_id,
        ?float $pbx_id = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCallsCallidDetail'][0]
    ): array
    {
        $request = $this->getCallsCallidDetailRequest($call_id, $pbx_id, $timezone, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model30[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model30[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model30[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model30[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model30[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCallidDetailAsync
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidDetail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCallidDetailAsync(
        string $call_id,
        ?float $pbx_id = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCallsCallidDetail'][0]
    ): PromiseInterface
    {
        return $this->getCallsCallidDetailAsyncWithHttpInfo($call_id, $pbx_id, $timezone, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCallidDetailAsyncWithHttpInfo
     *
     * Returns data for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidDetail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCallidDetailAsyncWithHttpInfo(
        string $call_id,
        ?float $pbx_id = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCallsCallidDetail'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model30[]';
        $request = $this->getCallsCallidDetailRequest($call_id, $pbx_id, $timezone, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCallidDetail'
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidDetail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallsCallidDetailRequest(
        string $call_id,
        ?float $pbx_id = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getCallsCallidDetail'][0]
    ): Request
    {

        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $call_id when calling getCallsCallidDetail'
            );
        }




        $resourcePath = '/calls/{callId}/detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($call_id !== null) {
            $resourcePath = str_replace(
                '{' . 'callId' . '}',
                ObjectSerializer::toPathValue($call_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCallidRecordings
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string[]|null $extensions extensions (optional, default to [["mp3"]])
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidRecordings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model28[]
     */
    public function getCallsCallidRecordings(
        string $call_id,
        ?float $pbx_id = null,
        array $extensions = [["mp3"]],
        string $contentType = self::contentTypes['getCallsCallidRecordings'][0]
    ): array
    {
        list($response) = $this->getCallsCallidRecordingsWithHttpInfo($call_id, $pbx_id, $extensions, $contentType);
        return $response;
    }

    /**
     * Operation getCallsCallidRecordingsWithHttpInfo
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string[]|null $extensions (optional, default to [["mp3"]])
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidRecordings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model28[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCallidRecordingsWithHttpInfo(
        string $call_id,
        ?float $pbx_id = null,
        array $extensions = [["mp3"]],
        string $contentType = self::contentTypes['getCallsCallidRecordings'][0]
    ): array
    {
        $request = $this->getCallsCallidRecordingsRequest($call_id, $pbx_id, $extensions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model28[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model28[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model28[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model28[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model28[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCallidRecordingsAsync
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string[]|null $extensions (optional, default to [["mp3"]])
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidRecordings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCallidRecordingsAsync(
        string $call_id,
        ?float $pbx_id = null,
        array $extensions = [["mp3"]],
        string $contentType = self::contentTypes['getCallsCallidRecordings'][0]
    ): PromiseInterface
    {
        return $this->getCallsCallidRecordingsAsyncWithHttpInfo($call_id, $pbx_id, $extensions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCallidRecordingsAsyncWithHttpInfo
     *
     * Returns all recordings for specified callId
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string[]|null $extensions (optional, default to [["mp3"]])
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidRecordings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCallidRecordingsAsyncWithHttpInfo(
        string $call_id,
        ?float $pbx_id = null,
        array $extensions = [["mp3"]],
        string $contentType = self::contentTypes['getCallsCallidRecordings'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model28[]';
        $request = $this->getCallsCallidRecordingsRequest($call_id, $pbx_id, $extensions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCallidRecordings'
     *
     * @param  string $call_id Represents linkedid (required)
     * @param  float|null $pbx_id Pbx id (optional)
     * @param  string[]|null $extensions (optional, default to [["mp3"]])
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidRecordings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallsCallidRecordingsRequest(
        string $call_id,
        ?float $pbx_id = null,
        array $extensions = [["mp3"]],
        string $contentType = self::contentTypes['getCallsCallidRecordings'][0]
    ): Request
    {

        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $call_id when calling getCallsCallidRecordings'
            );
        }




        $resourcePath = '/calls/{callId}/recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $extensions,
            'extensions', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($call_id !== null) {
            $resourcePath = str_replace(
                '{' . 'callId' . '}',
                ObjectSerializer::toPathValue($call_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCallidTranscript
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidTranscript'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model33[]
     */
    public function getCallsCallidTranscript(
        string $call_id,
        ?float $pbx_id = null,
        string $contentType = self::contentTypes['getCallsCallidTranscript'][0]
    ): array
    {
        list($response) = $this->getCallsCallidTranscriptWithHttpInfo($call_id, $pbx_id, $contentType);
        return $response;
    }

    /**
     * Operation getCallsCallidTranscriptWithHttpInfo
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidTranscript'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model33[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCallidTranscriptWithHttpInfo(
        string $call_id,
        ?float $pbx_id = null,
        string $contentType = self::contentTypes['getCallsCallidTranscript'][0]
    ): array
    {
        $request = $this->getCallsCallidTranscriptRequest($call_id, $pbx_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model33[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model33[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model33[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model33[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model33[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCallidTranscriptAsync
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidTranscript'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCallidTranscriptAsync(
        string $call_id,
        ?float $pbx_id = null,
        string $contentType = self::contentTypes['getCallsCallidTranscript'][0]
    ): PromiseInterface
    {
        return $this->getCallsCallidTranscriptAsyncWithHttpInfo($call_id, $pbx_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCallidTranscriptAsyncWithHttpInfo
     *
     * Returns transcript of all recordings for specified callId
     *
     * @param  string $call_id Call ID (required)
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidTranscript'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCallidTranscriptAsyncWithHttpInfo(
        string $call_id,
        ?float $pbx_id = null,
        string $contentType = self::contentTypes['getCallsCallidTranscript'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model33[]';
        $request = $this->getCallsCallidTranscriptRequest($call_id, $pbx_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCallidTranscript'
     *
     * @param  string $call_id Call ID (required)
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCallidTranscript'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallsCallidTranscriptRequest(
        string $call_id,
        ?float $pbx_id = null,
        string $contentType = self::contentTypes['getCallsCallidTranscript'][0]
    ): Request
    {

        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $call_id when calling getCallsCallidTranscript'
            );
        }



        $resourcePath = '/calls/{callId}/transcript';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($call_id !== null) {
            $resourcePath = str_replace(
                '{' . 'callId' . '}',
                ObjectSerializer::toPathValue($call_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsCurrent
     *
     * Return current calls
     *
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string|null $user_id User Id (optional)
     * @param  string|null $user_login User login (optional)
     * @param  string|null $call_id Call id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCurrent'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model15[]
     */
    public function getCallsCurrent(
        ?float $pbx_id = null,
        ?string $user_id = null,
        ?string $user_login = null,
        ?string $call_id = null,
        string $contentType = self::contentTypes['getCallsCurrent'][0]
    ): array
    {
        list($response) = $this->getCallsCurrentWithHttpInfo($pbx_id, $user_id, $user_login, $call_id, $contentType);
        return $response;
    }

    /**
     * Operation getCallsCurrentWithHttpInfo
     *
     * Return current calls
     *
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string|null $user_id User Id (optional)
     * @param  string|null $user_login User login (optional)
     * @param  string|null $call_id Call id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCurrent'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model15[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsCurrentWithHttpInfo(
        ?float $pbx_id = null,
        ?string $user_id = null,
        ?string $user_login = null,
        ?string $call_id = null,
        string $contentType = self::contentTypes['getCallsCurrent'][0]
    ): array
    {
        $request = $this->getCallsCurrentRequest($pbx_id, $user_id, $user_login, $call_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model15[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model15[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model15[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model15[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model15[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsCurrentAsync
     *
     * Return current calls
     *
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string|null $user_id User Id (optional)
     * @param  string|null $user_login User login (optional)
     * @param  string|null $call_id Call id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCurrent'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCurrentAsync(
        ?float $pbx_id = null,
        ?string $user_id = null,
        ?string $user_login = null,
        ?string $call_id = null,
        string $contentType = self::contentTypes['getCallsCurrent'][0]
    ): PromiseInterface
    {
        return $this->getCallsCurrentAsyncWithHttpInfo($pbx_id, $user_id, $user_login, $call_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsCurrentAsyncWithHttpInfo
     *
     * Return current calls
     *
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string|null $user_id User Id (optional)
     * @param  string|null $user_login User login (optional)
     * @param  string|null $call_id Call id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCurrent'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsCurrentAsyncWithHttpInfo(
        ?float $pbx_id = null,
        ?string $user_id = null,
        ?string $user_login = null,
        ?string $call_id = null,
        string $contentType = self::contentTypes['getCallsCurrent'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model15[]';
        $request = $this->getCallsCurrentRequest($pbx_id, $user_id, $user_login, $call_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsCurrent'
     *
     * @param  float|null $pbx_id PBX ID (optional)
     * @param  string|null $user_id User Id (optional)
     * @param  string|null $user_login User login (optional)
     * @param  string|null $call_id Call id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsCurrent'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallsCurrentRequest(
        ?float $pbx_id = null,
        ?string $user_id = null,
        ?string $user_login = null,
        ?string $call_id = null,
        string $contentType = self::contentTypes['getCallsCurrent'][0]
    ): Request
    {






        $resourcePath = '/calls/current';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_login,
            'userLogin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $call_id,
            'callId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsMissed
     *
     * Missed and abandoned calls from the call center queues.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsMissed'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model18[]
     */
    public function getCallsMissed(
        string $contentType = self::contentTypes['getCallsMissed'][0]
    ): array
    {
        list($response) = $this->getCallsMissedWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getCallsMissedWithHttpInfo
     *
     * Missed and abandoned calls from the call center queues.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsMissed'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model18[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsMissedWithHttpInfo(
        string $contentType = self::contentTypes['getCallsMissed'][0]
    ): array
    {
        $request = $this->getCallsMissedRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model18[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model18[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model18[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model18[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model18[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsMissedAsync
     *
     * Missed and abandoned calls from the call center queues.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsMissed'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsMissedAsync(
        string $contentType = self::contentTypes['getCallsMissed'][0]
    ): PromiseInterface
    {
        return $this->getCallsMissedAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsMissedAsyncWithHttpInfo
     *
     * Missed and abandoned calls from the call center queues.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsMissed'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsMissedAsyncWithHttpInfo(
        string $contentType = self::contentTypes['getCallsMissed'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model18[]';
        $request = $this->getCallsMissedRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsMissed'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsMissed'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallsMissedRequest(
        string $contentType = self::contentTypes['getCallsMissed'][0]
    ): Request
    {


        $resourcePath = '/calls/missed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallsTransferDestinations
     *
     * List of destinations for a transferred call.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsTransferDestinations'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model26[]
     */
    public function getCallsTransferDestinations(
        string $contentType = self::contentTypes['getCallsTransferDestinations'][0]
    ): array
    {
        list($response) = $this->getCallsTransferDestinationsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getCallsTransferDestinationsWithHttpInfo
     *
     * List of destinations for a transferred call.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsTransferDestinations'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model26[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsTransferDestinationsWithHttpInfo(
        string $contentType = self::contentTypes['getCallsTransferDestinations'][0]
    ): array
    {
        $request = $this->getCallsTransferDestinationsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model26[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model26[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model26[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model26[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model26[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCallsTransferDestinationsAsync
     *
     * List of destinations for a transferred call.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsTransferDestinations'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsTransferDestinationsAsync(
        string $contentType = self::contentTypes['getCallsTransferDestinations'][0]
    ): PromiseInterface
    {
        return $this->getCallsTransferDestinationsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallsTransferDestinationsAsyncWithHttpInfo
     *
     * List of destinations for a transferred call.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsTransferDestinations'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCallsTransferDestinationsAsyncWithHttpInfo(
        string $contentType = self::contentTypes['getCallsTransferDestinations'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model26[]';
        $request = $this->getCallsTransferDestinationsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallsTransferDestinations'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallsTransferDestinations'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallsTransferDestinationsRequest(
        string $contentType = self::contentTypes['getCallsTransferDestinations'][0]
    ): Request
    {


        $resourcePath = '/calls/transfer/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCalls
     *
     * Create new call
     *
     * @param  float|null $pbx_id pbx_id (optional)
     * @param  \Voipex\Ipbx\Model\Model50|null $model50 model50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model51
     */
    public function postCalls(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model50 $model50 = null,
        string $contentType = self::contentTypes['postCalls'][0]
    ): \Voipex\Ipbx\Model\Model51
    {
        list($response) = $this->postCallsWithHttpInfo($pbx_id, $model50, $contentType);
        return $response;
    }

    /**
     * Operation postCallsWithHttpInfo
     *
     * Create new call
     *
     * @param  float|null $pbx_id (optional)
     * @param  \Voipex\Ipbx\Model\Model50|null $model50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model51, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCallsWithHttpInfo(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model50 $model50 = null,
        string $contentType = self::contentTypes['postCalls'][0]
    ): array
    {
        $request = $this->postCallsRequest($pbx_id, $model50, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model51', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model51' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model51', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model51';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model51',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCallsAsync
     *
     * Create new call
     *
     * @param  float|null $pbx_id (optional)
     * @param  \Voipex\Ipbx\Model\Model50|null $model50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postCallsAsync(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model50 $model50 = null,
        string $contentType = self::contentTypes['postCalls'][0]
    ): PromiseInterface
    {
        return $this->postCallsAsyncWithHttpInfo($pbx_id, $model50, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCallsAsyncWithHttpInfo
     *
     * Create new call
     *
     * @param  float|null $pbx_id (optional)
     * @param  \Voipex\Ipbx\Model\Model50|null $model50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postCallsAsyncWithHttpInfo(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model50 $model50 = null,
        string $contentType = self::contentTypes['postCalls'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model51';
        $request = $this->postCallsRequest($pbx_id, $model50, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCalls'
     *
     * @param  float|null $pbx_id (optional)
     * @param  \Voipex\Ipbx\Model\Model50|null $model50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCallsRequest(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model50 $model50 = null,
        string $contentType = self::contentTypes['postCalls'][0]
    ): Request
    {




        $resourcePath = '/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model50)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model50));
            } else {
                $httpBody = $model50;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallsMonitor
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string|null $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string|null $type Spy or whisper (optional, default to 'spy')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsMonitor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model43
     */
    public function putCallsMonitor(
        string $channel_id,
        ?string $user_id = null,
        ?string $type = 'spy',
        string $contentType = self::contentTypes['putCallsMonitor'][0]
    ): \Voipex\Ipbx\Model\Model43
    {
        list($response) = $this->putCallsMonitorWithHttpInfo($channel_id, $user_id, $type, $contentType);
        return $response;
    }

    /**
     * Operation putCallsMonitorWithHttpInfo
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string|null $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string|null $type Spy or whisper (optional, default to 'spy')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsMonitor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model43, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallsMonitorWithHttpInfo(
        string $channel_id,
        ?string $user_id = null,
        ?string $type = 'spy',
        string $contentType = self::contentTypes['putCallsMonitor'][0]
    ): array
    {
        $request = $this->putCallsMonitorRequest($channel_id, $user_id, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model43', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model43' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model43', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model43';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallsMonitorAsync
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string|null $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string|null $type Spy or whisper (optional, default to 'spy')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsMonitor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putCallsMonitorAsync(
        string $channel_id,
        ?string $user_id = null,
        ?string $type = 'spy',
        string $contentType = self::contentTypes['putCallsMonitor'][0]
    ): PromiseInterface
    {
        return $this->putCallsMonitorAsyncWithHttpInfo($channel_id, $user_id, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallsMonitorAsyncWithHttpInfo
     *
     * Monitor call
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string|null $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string|null $type Spy or whisper (optional, default to 'spy')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsMonitor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putCallsMonitorAsyncWithHttpInfo(
        string $channel_id,
        ?string $user_id = null,
        ?string $type = 'spy',
        string $contentType = self::contentTypes['putCallsMonitor'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model43';
        $request = $this->putCallsMonitorRequest($channel_id, $user_id, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallsMonitor'
     *
     * @param  string $channel_id Channel ID (required)
     * @param  string|null $user_id Monitoring user ID. By default, the user is taken from the authentication data. (Optional) (optional)
     * @param  string|null $type Spy or whisper (optional, default to 'spy')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsMonitor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCallsMonitorRequest(
        string $channel_id,
        ?string $user_id = null,
        ?string $type = 'spy',
        string $contentType = self::contentTypes['putCallsMonitor'][0]
    ): Request
    {

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $channel_id when calling putCallsMonitor'
            );
        }




        $resourcePath = '/calls/monitor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_id,
            'channelId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCallsTransfer
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45|null $model45 model45 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsTransfer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function putCallsTransfer(
        ?\Voipex\Ipbx\Model\Model45 $model45 = null,
        string $contentType = self::contentTypes['putCallsTransfer'][0]
    ): string
    {
        list($response) = $this->putCallsTransferWithHttpInfo($model45, $contentType);
        return $response;
    }

    /**
     * Operation putCallsTransferWithHttpInfo
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45|null $model45 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsTransfer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCallsTransferWithHttpInfo(
        ?\Voipex\Ipbx\Model\Model45 $model45 = null,
        string $contentType = self::contentTypes['putCallsTransfer'][0]
    ): array
    {
        $request = $this->putCallsTransferRequest($model45, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                default:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCallsTransferAsync
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45|null $model45 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsTransfer'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putCallsTransferAsync(
        ?\Voipex\Ipbx\Model\Model45 $model45 = null,
        string $contentType = self::contentTypes['putCallsTransfer'][0]
    ): PromiseInterface
    {
        return $this->putCallsTransferAsyncWithHttpInfo($model45, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCallsTransferAsyncWithHttpInfo
     *
     * Transfer a call
     *
     * @param  \Voipex\Ipbx\Model\Model45|null $model45 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsTransfer'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putCallsTransferAsyncWithHttpInfo(
        ?\Voipex\Ipbx\Model\Model45 $model45 = null,
        string $contentType = self::contentTypes['putCallsTransfer'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->putCallsTransferRequest($model45, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCallsTransfer'
     *
     * @param  \Voipex\Ipbx\Model\Model45|null $model45 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCallsTransfer'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCallsTransferRequest(
        ?\Voipex\Ipbx\Model\Model45 $model45 = null,
        string $contentType = self::contentTypes['putCallsTransfer'][0]
    ): Request
    {



        $resourcePath = '/calls/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model45)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model45));
            } else {
                $httpBody = $model45;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
