<?php
/**
 * ReportsApi
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Voipex\Ipbx\ApiException;
use Voipex\Ipbx\Configuration;
use Voipex\Ipbx\HeaderSelector;
use Voipex\Ipbx\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getReportsAgentsActivity' => [
            'application/json',
        ],
        'getReportsAgentsActivitydurations' => [
            'application/json',
        ],
        'getReportsAgentsDailystats' => [
            'application/json',
        ],
        'getReportsCalls' => [
            'application/json',
        ],
        'getReportsQueues' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getReportsAgentsActivity
     *
     * Get agents activity
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string[]|null $queues queues (optional)
     * @param  string[]|null $agents agents (optional)
     * @param  string[]|null $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float|null $page page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivity'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model38
     */
    public function getReportsAgentsActivity(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $timezone = 'Europe/Prague',
        array $queues = null,
        array $agents = null,
        array $events = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        string $contentType = self::contentTypes['getReportsAgentsActivity'][0]
    ): \Voipex\Ipbx\Model\Model38
    {
        list($response) = $this->getReportsAgentsActivityWithHttpInfo($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getReportsAgentsActivityWithHttpInfo
     *
     * Get agents activity
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivity'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model38, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsAgentsActivityWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $timezone = 'Europe/Prague',
        array $queues = null,
        array $agents = null,
        array $events = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        string $contentType = self::contentTypes['getReportsAgentsActivity'][0]
    ): array
    {
        $request = $this->getReportsAgentsActivityRequest($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model38', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model38' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model38', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model38';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model38',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAgentsActivityAsync
     *
     * Get agents activity
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivity'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsAgentsActivityAsync(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $timezone = 'Europe/Prague',
        array $queues = null,
        array $agents = null,
        array $events = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        string $contentType = self::contentTypes['getReportsAgentsActivity'][0]
    ): PromiseInterface
    {
        return $this->getReportsAgentsActivityAsyncWithHttpInfo($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAgentsActivityAsyncWithHttpInfo
     *
     * Get agents activity
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivity'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsAgentsActivityAsyncWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $timezone = 'Europe/Prague',
        array $queues = null,
        array $agents = null,
        array $events = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        string $contentType = self::contentTypes['getReportsAgentsActivity'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model38';
        $request = $this->getReportsAgentsActivityRequest($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsAgentsActivity'
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size Maximum is 5000 (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivity'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReportsAgentsActivityRequest(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?string $timezone = 'Europe/Prague',
        array $queues = null,
        array $agents = null,
        array $events = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        string $contentType = self::contentTypes['getReportsAgentsActivity'][0]
    ): Request
    {







        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling ReportsApi.getReportsAgentsActivity, must be bigger than or equal to 1.');
        }
        
        if ($page_size !== null && $page_size > 5000) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling ReportsApi.getReportsAgentsActivity, must be smaller than or equal to 5000.');
        }
        

        $resourcePath = '/reports/agents/activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $queues,
            'queues', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $agents,
            'agents', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $events,
            'events', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsAgentsActivitydurations
     *
     * Get agents activity durations
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $agents agents (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivitydurations'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model39[]
     */
    public function getReportsAgentsActivitydurations(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $agents = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsAgentsActivitydurations'][0]
    ): array
    {
        list($response) = $this->getReportsAgentsActivitydurationsWithHttpInfo($start_time, $end_time, $agents, $timezone, $contentType);
        return $response;
    }

    /**
     * Operation getReportsAgentsActivitydurationsWithHttpInfo
     *
     * Get agents activity durations
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $agents (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivitydurations'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model39[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsAgentsActivitydurationsWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $agents = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsAgentsActivitydurations'][0]
    ): array
    {
        $request = $this->getReportsAgentsActivitydurationsRequest($start_time, $end_time, $agents, $timezone, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model39[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model39[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model39[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model39[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model39[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAgentsActivitydurationsAsync
     *
     * Get agents activity durations
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $agents (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivitydurations'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsAgentsActivitydurationsAsync(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $agents = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsAgentsActivitydurations'][0]
    ): PromiseInterface
    {
        return $this->getReportsAgentsActivitydurationsAsyncWithHttpInfo($start_time, $end_time, $agents, $timezone, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAgentsActivitydurationsAsyncWithHttpInfo
     *
     * Get agents activity durations
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $agents (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivitydurations'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsAgentsActivitydurationsAsyncWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $agents = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsAgentsActivitydurations'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model39[]';
        $request = $this->getReportsAgentsActivitydurationsRequest($start_time, $end_time, $agents, $timezone, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsAgentsActivitydurations'
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $agents (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsActivitydurations'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReportsAgentsActivitydurationsRequest(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $agents = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsAgentsActivitydurations'][0]
    ): Request
    {






        $resourcePath = '/reports/agents/activity-durations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $agents,
            'agents', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsAgentsDailystats
     *
     * Daily agent statistics
     *
     * @param  string[]|null $agents agents (optional)
     * @param  string[]|null $users_id users_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsDailystats'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model41[]
     */
    public function getReportsAgentsDailystats(
        array $agents = null,
        array $users_id = null,
        string $contentType = self::contentTypes['getReportsAgentsDailystats'][0]
    ): array
    {
        list($response) = $this->getReportsAgentsDailystatsWithHttpInfo($agents, $users_id, $contentType);
        return $response;
    }

    /**
     * Operation getReportsAgentsDailystatsWithHttpInfo
     *
     * Daily agent statistics
     *
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $users_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsDailystats'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model41[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsAgentsDailystatsWithHttpInfo(
        array $agents = null,
        array $users_id = null,
        string $contentType = self::contentTypes['getReportsAgentsDailystats'][0]
    ): array
    {
        $request = $this->getReportsAgentsDailystatsRequest($agents, $users_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model41[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model41[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model41[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model41[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model41[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAgentsDailystatsAsync
     *
     * Daily agent statistics
     *
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $users_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsDailystats'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsAgentsDailystatsAsync(
        array $agents = null,
        array $users_id = null,
        string $contentType = self::contentTypes['getReportsAgentsDailystats'][0]
    ): PromiseInterface
    {
        return $this->getReportsAgentsDailystatsAsyncWithHttpInfo($agents, $users_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAgentsDailystatsAsyncWithHttpInfo
     *
     * Daily agent statistics
     *
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $users_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsDailystats'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsAgentsDailystatsAsyncWithHttpInfo(
        array $agents = null,
        array $users_id = null,
        string $contentType = self::contentTypes['getReportsAgentsDailystats'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model41[]';
        $request = $this->getReportsAgentsDailystatsRequest($agents, $users_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsAgentsDailystats'
     *
     * @param  string[]|null $agents (optional)
     * @param  string[]|null $users_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsAgentsDailystats'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReportsAgentsDailystatsRequest(
        array $agents = null,
        array $users_id = null,
        string $contentType = self::contentTypes['getReportsAgentsDailystats'][0]
    ): Request
    {




        $resourcePath = '/reports/agents/daily-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $agents,
            'agents', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $users_id,
            'usersId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsCalls
     *
     * Returns extended calls information
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues queues (optional)
     * @param  string[]|null $agents agents (optional)
     * @param  bool|null $answered answered (optional)
     * @param  string|null $direction direction (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model22[]
     */
    public function getReportsCalls(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $queues = null,
        array $agents = null,
        ?bool $answered = null,
        ?string $direction = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsCalls'][0]
    ): array
    {
        list($response) = $this->getReportsCallsWithHttpInfo($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone, $contentType);
        return $response;
    }

    /**
     * Operation getReportsCallsWithHttpInfo
     *
     * Returns extended calls information
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  bool|null $answered (optional)
     * @param  string|null $direction (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsCalls'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model22[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsCallsWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $queues = null,
        array $agents = null,
        ?bool $answered = null,
        ?string $direction = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsCalls'][0]
    ): array
    {
        $request = $this->getReportsCallsRequest($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model22[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model22[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model22[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model22[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model22[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsCallsAsync
     *
     * Returns extended calls information
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  bool|null $answered (optional)
     * @param  string|null $direction (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsCallsAsync(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $queues = null,
        array $agents = null,
        ?bool $answered = null,
        ?string $direction = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsCalls'][0]
    ): PromiseInterface
    {
        return $this->getReportsCallsAsyncWithHttpInfo($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsCallsAsyncWithHttpInfo
     *
     * Returns extended calls information
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  bool|null $answered (optional)
     * @param  string|null $direction (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsCallsAsyncWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $queues = null,
        array $agents = null,
        ?bool $answered = null,
        ?string $direction = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsCalls'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model22[]';
        $request = $this->getReportsCallsRequest($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsCalls'
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues (optional)
     * @param  string[]|null $agents (optional)
     * @param  bool|null $answered (optional)
     * @param  string|null $direction (optional)
     * @param  string|null $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to 'Europe/Prague')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsCalls'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReportsCallsRequest(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        array $queues = null,
        array $agents = null,
        ?bool $answered = null,
        ?string $direction = null,
        ?string $timezone = 'Europe/Prague',
        string $contentType = self::contentTypes['getReportsCalls'][0]
    ): Request
    {









        $resourcePath = '/reports/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $queues,
            'queues', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $agents,
            'agents', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $answered,
            'answered', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsQueues
     *
     * Return statistics for queues
     *
     * @param  string|null $start_time ISO 8601 format (optional)
     * @param  string|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues Queue names to filter (optional)
     * @param  float|null $sla SLA limit for hold time (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsQueues'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model24[]
     */
    public function getReportsQueues(
        ?string $start_time = null,
        ?string $end_time = null,
        array $queues = null,
        ?float $sla = 20,
        string $contentType = self::contentTypes['getReportsQueues'][0]
    ): array
    {
        list($response) = $this->getReportsQueuesWithHttpInfo($start_time, $end_time, $queues, $sla, $contentType);
        return $response;
    }

    /**
     * Operation getReportsQueuesWithHttpInfo
     *
     * Return statistics for queues
     *
     * @param  string|null $start_time ISO 8601 format (optional)
     * @param  string|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues Queue names to filter (optional)
     * @param  float|null $sla SLA limit for hold time (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsQueues'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model24[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsQueuesWithHttpInfo(
        ?string $start_time = null,
        ?string $end_time = null,
        array $queues = null,
        ?float $sla = 20,
        string $contentType = self::contentTypes['getReportsQueues'][0]
    ): array
    {
        $request = $this->getReportsQueuesRequest($start_time, $end_time, $queues, $sla, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model24[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model24[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model24[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model24[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model24[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsQueuesAsync
     *
     * Return statistics for queues
     *
     * @param  string|null $start_time ISO 8601 format (optional)
     * @param  string|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues Queue names to filter (optional)
     * @param  float|null $sla SLA limit for hold time (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsQueues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsQueuesAsync(
        ?string $start_time = null,
        ?string $end_time = null,
        array $queues = null,
        ?float $sla = 20,
        string $contentType = self::contentTypes['getReportsQueues'][0]
    ): PromiseInterface
    {
        return $this->getReportsQueuesAsyncWithHttpInfo($start_time, $end_time, $queues, $sla, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsQueuesAsyncWithHttpInfo
     *
     * Return statistics for queues
     *
     * @param  string|null $start_time ISO 8601 format (optional)
     * @param  string|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues Queue names to filter (optional)
     * @param  float|null $sla SLA limit for hold time (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsQueues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getReportsQueuesAsyncWithHttpInfo(
        ?string $start_time = null,
        ?string $end_time = null,
        array $queues = null,
        ?float $sla = 20,
        string $contentType = self::contentTypes['getReportsQueues'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model24[]';
        $request = $this->getReportsQueuesRequest($start_time, $end_time, $queues, $sla, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsQueues'
     *
     * @param  string|null $start_time ISO 8601 format (optional)
     * @param  string|null $end_time ISO 8601 format (optional)
     * @param  string[]|null $queues Queue names to filter (optional)
     * @param  float|null $sla SLA limit for hold time (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReportsQueues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReportsQueuesRequest(
        ?string $start_time = null,
        ?string $end_time = null,
        array $queues = null,
        ?float $sla = 20,
        string $contentType = self::contentTypes['getReportsQueues'][0]
    ): Request
    {






        $resourcePath = '/reports/queues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $queues,
            'queues', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sla,
            'sla', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
