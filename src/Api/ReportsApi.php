<?php
/**
 * ReportsApi
 * PHP version 5
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * OpenAPI spec version: 1.98.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Voipex\Ipbx\ApiException;
use Voipex\Ipbx\Configuration;
use Voipex\Ipbx\HeaderSelector;
use Voipex\Ipbx\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  Voipex\Ipbx
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getReportsAgentsActivity
     *
     * Get agents activity
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     * @param  string[] $queues queues (optional)
     * @param  string[] $agents agents (optional)
     * @param  string[] $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float $page page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 1000)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model38
     */
    public function getReportsAgentsActivity($start_time = null, $end_time = null, $timezone = 'Europe/Prague', $queues = null, $agents = null, $events = null, $page = '1', $page_size = '1000')
    {
        list($response) = $this->getReportsAgentsActivityWithHttpInfo($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size);
        return $response;
    }

    /**
     * Operation getReportsAgentsActivityWithHttpInfo
     *
     * Get agents activity
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  string[] $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 1000)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model38, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsAgentsActivityWithHttpInfo($start_time = null, $end_time = null, $timezone = 'Europe/Prague', $queues = null, $agents = null, $events = null, $page = '1', $page_size = '1000')
    {
        $returnType = '\Voipex\Ipbx\Model\Model38';
        $request = $this->getReportsAgentsActivityRequest($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model38',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAgentsActivityAsync
     *
     * Get agents activity
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  string[] $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 1000)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAgentsActivityAsync($start_time = null, $end_time = null, $timezone = 'Europe/Prague', $queues = null, $agents = null, $events = null, $page = '1', $page_size = '1000')
    {
        return $this->getReportsAgentsActivityAsyncWithHttpInfo($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAgentsActivityAsyncWithHttpInfo
     *
     * Get agents activity
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  string[] $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 1000)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAgentsActivityAsyncWithHttpInfo($start_time = null, $end_time = null, $timezone = 'Europe/Prague', $queues = null, $agents = null, $events = null, $page = '1', $page_size = '1000')
    {
        $returnType = '\Voipex\Ipbx\Model\Model38';
        $request = $this->getReportsAgentsActivityRequest($start_time, $end_time, $timezone, $queues, $agents, $events, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsAgentsActivity'
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  string[] $events Possible values: UNPAUSE, PAUSE, ADDMEMBER, REMOVEMEMBER, ADDMEMBEREXTEN, COMPLETEAGENT, COMPLETECALLER, MEMBERSTATUS, MEMBERPRESENCE (optional)
     * @param  float $page (optional, default to 1)
     * @param  float $page_size Maximum is 5000 (optional, default to 1000)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportsAgentsActivityRequest($start_time = null, $end_time = null, $timezone = 'Europe/Prague', $queues = null, $agents = null, $events = null, $page = '1', $page_size = '1000')
    {

        $resourcePath = '/reports/agents/activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time, 'date-time');
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time, 'date-time');
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = ObjectSerializer::toQueryValue($timezone, null);
        }
        // query params
        if (is_array($queues)) {
            $queues = ObjectSerializer::serializeCollection($queues, 'multi', true);
        }
        if ($queues !== null) {
            $queryParams['queues'] = ObjectSerializer::toQueryValue($queues, null);
        }
        // query params
        if (is_array($agents)) {
            $agents = ObjectSerializer::serializeCollection($agents, 'multi', true);
        }
        if ($agents !== null) {
            $queryParams['agents'] = ObjectSerializer::toQueryValue($agents, null);
        }
        // query params
        if (is_array($events)) {
            $events = ObjectSerializer::serializeCollection($events, 'multi', true);
        }
        if ($events !== null) {
            $queryParams['events'] = ObjectSerializer::toQueryValue($events, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsAgentsActivitydurations
     *
     * Get agents activity durations
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $agents agents (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model40
     */
    public function getReportsAgentsActivitydurations($start_time = null, $end_time = null, $agents = null, $timezone = 'Europe/Prague')
    {
        list($response) = $this->getReportsAgentsActivitydurationsWithHttpInfo($start_time, $end_time, $agents, $timezone);
        return $response;
    }

    /**
     * Operation getReportsAgentsActivitydurationsWithHttpInfo
     *
     * Get agents activity durations
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $agents (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model40, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsAgentsActivitydurationsWithHttpInfo($start_time = null, $end_time = null, $agents = null, $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model40';
        $request = $this->getReportsAgentsActivitydurationsRequest($start_time, $end_time, $agents, $timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model40',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAgentsActivitydurationsAsync
     *
     * Get agents activity durations
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $agents (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAgentsActivitydurationsAsync($start_time = null, $end_time = null, $agents = null, $timezone = 'Europe/Prague')
    {
        return $this->getReportsAgentsActivitydurationsAsyncWithHttpInfo($start_time, $end_time, $agents, $timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAgentsActivitydurationsAsyncWithHttpInfo
     *
     * Get agents activity durations
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $agents (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAgentsActivitydurationsAsyncWithHttpInfo($start_time = null, $end_time = null, $agents = null, $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model40';
        $request = $this->getReportsAgentsActivitydurationsRequest($start_time, $end_time, $agents, $timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsAgentsActivitydurations'
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $agents (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportsAgentsActivitydurationsRequest($start_time = null, $end_time = null, $agents = null, $timezone = 'Europe/Prague')
    {

        $resourcePath = '/reports/agents/activity-durations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time, 'date-time');
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time, 'date-time');
        }
        // query params
        if (is_array($agents)) {
            $agents = ObjectSerializer::serializeCollection($agents, 'multi', true);
        }
        if ($agents !== null) {
            $queryParams['agents'] = ObjectSerializer::toQueryValue($agents, null);
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = ObjectSerializer::toQueryValue($timezone, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsAgentsDailystats
     *
     * Daily agent statistics
     *
     * @param  string[] $agents agents (optional)
     * @param  string[] $users_id users_id (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model42
     */
    public function getReportsAgentsDailystats($agents = null, $users_id = null)
    {
        list($response) = $this->getReportsAgentsDailystatsWithHttpInfo($agents, $users_id);
        return $response;
    }

    /**
     * Operation getReportsAgentsDailystatsWithHttpInfo
     *
     * Daily agent statistics
     *
     * @param  string[] $agents (optional)
     * @param  string[] $users_id (optional)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model42, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsAgentsDailystatsWithHttpInfo($agents = null, $users_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model42';
        $request = $this->getReportsAgentsDailystatsRequest($agents, $users_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model42',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAgentsDailystatsAsync
     *
     * Daily agent statistics
     *
     * @param  string[] $agents (optional)
     * @param  string[] $users_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAgentsDailystatsAsync($agents = null, $users_id = null)
    {
        return $this->getReportsAgentsDailystatsAsyncWithHttpInfo($agents, $users_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAgentsDailystatsAsyncWithHttpInfo
     *
     * Daily agent statistics
     *
     * @param  string[] $agents (optional)
     * @param  string[] $users_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAgentsDailystatsAsyncWithHttpInfo($agents = null, $users_id = null)
    {
        $returnType = '\Voipex\Ipbx\Model\Model42';
        $request = $this->getReportsAgentsDailystatsRequest($agents, $users_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsAgentsDailystats'
     *
     * @param  string[] $agents (optional)
     * @param  string[] $users_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportsAgentsDailystatsRequest($agents = null, $users_id = null)
    {

        $resourcePath = '/reports/agents/daily-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($agents)) {
            $agents = ObjectSerializer::serializeCollection($agents, 'multi', true);
        }
        if ($agents !== null) {
            $queryParams['agents'] = ObjectSerializer::toQueryValue($agents, null);
        }
        // query params
        if (is_array($users_id)) {
            $users_id = ObjectSerializer::serializeCollection($users_id, 'multi', true);
        }
        if ($users_id !== null) {
            $queryParams['usersId'] = ObjectSerializer::toQueryValue($users_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsCalls
     *
     * Returns extended calls information
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $queues queues (optional)
     * @param  string[] $agents agents (optional)
     * @param  bool $answered answered (optional)
     * @param  string $direction direction (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model23
     */
    public function getReportsCalls($start_time = null, $end_time = null, $queues = null, $agents = null, $answered = null, $direction = null, $timezone = 'Europe/Prague')
    {
        list($response) = $this->getReportsCallsWithHttpInfo($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone);
        return $response;
    }

    /**
     * Operation getReportsCallsWithHttpInfo
     *
     * Returns extended calls information
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  bool $answered (optional)
     * @param  string $direction (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model23, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsCallsWithHttpInfo($start_time = null, $end_time = null, $queues = null, $agents = null, $answered = null, $direction = null, $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model23';
        $request = $this->getReportsCallsRequest($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model23',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsCallsAsync
     *
     * Returns extended calls information
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  bool $answered (optional)
     * @param  string $direction (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsCallsAsync($start_time = null, $end_time = null, $queues = null, $agents = null, $answered = null, $direction = null, $timezone = 'Europe/Prague')
    {
        return $this->getReportsCallsAsyncWithHttpInfo($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsCallsAsyncWithHttpInfo
     *
     * Returns extended calls information
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  bool $answered (optional)
     * @param  string $direction (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsCallsAsyncWithHttpInfo($start_time = null, $end_time = null, $queues = null, $agents = null, $answered = null, $direction = null, $timezone = 'Europe/Prague')
    {
        $returnType = '\Voipex\Ipbx\Model\Model23';
        $request = $this->getReportsCallsRequest($start_time, $end_time, $queues, $agents, $answered, $direction, $timezone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsCalls'
     *
     * @param  \DateTime $start_time ISO 8601 format (optional)
     * @param  \DateTime $end_time ISO 8601 format (optional)
     * @param  string[] $queues (optional)
     * @param  string[] $agents (optional)
     * @param  bool $answered (optional)
     * @param  string $direction (optional)
     * @param  string $timezone Enter the timezone in which you want to return the call time (possible options get on https://momentjs.com/timezone/) (optional, default to Europe/Prague)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportsCallsRequest($start_time = null, $end_time = null, $queues = null, $agents = null, $answered = null, $direction = null, $timezone = 'Europe/Prague')
    {

        $resourcePath = '/reports/calls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time, 'date-time');
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time, 'date-time');
        }
        // query params
        if (is_array($queues)) {
            $queues = ObjectSerializer::serializeCollection($queues, 'multi', true);
        }
        if ($queues !== null) {
            $queryParams['queues'] = ObjectSerializer::toQueryValue($queues, null);
        }
        // query params
        if (is_array($agents)) {
            $agents = ObjectSerializer::serializeCollection($agents, 'multi', true);
        }
        if ($agents !== null) {
            $queryParams['agents'] = ObjectSerializer::toQueryValue($agents, null);
        }
        // query params
        if ($answered !== null) {
            $queryParams['answered'] = ObjectSerializer::toQueryValue($answered, null);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction, null);
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = ObjectSerializer::toQueryValue($timezone, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportsQueues
     *
     * Return statistics for queues
     *
     * @param  string $start_time ISO 8601 format (optional)
     * @param  string $end_time ISO 8601 format (optional)
     * @param  string[] $queues Queue names to filter (optional)
     * @param  float $sla SLA limit for hold time (optional, default to 20)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model25
     */
    public function getReportsQueues($start_time = null, $end_time = null, $queues = null, $sla = '20')
    {
        list($response) = $this->getReportsQueuesWithHttpInfo($start_time, $end_time, $queues, $sla);
        return $response;
    }

    /**
     * Operation getReportsQueuesWithHttpInfo
     *
     * Return statistics for queues
     *
     * @param  string $start_time ISO 8601 format (optional)
     * @param  string $end_time ISO 8601 format (optional)
     * @param  string[] $queues Queue names to filter (optional)
     * @param  float $sla SLA limit for hold time (optional, default to 20)
     *
     * @throws \Voipex\Ipbx\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model25, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsQueuesWithHttpInfo($start_time = null, $end_time = null, $queues = null, $sla = '20')
    {
        $returnType = '\Voipex\Ipbx\Model\Model25';
        $request = $this->getReportsQueuesRequest($start_time, $end_time, $queues, $sla);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model25',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsQueuesAsync
     *
     * Return statistics for queues
     *
     * @param  string $start_time ISO 8601 format (optional)
     * @param  string $end_time ISO 8601 format (optional)
     * @param  string[] $queues Queue names to filter (optional)
     * @param  float $sla SLA limit for hold time (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsQueuesAsync($start_time = null, $end_time = null, $queues = null, $sla = '20')
    {
        return $this->getReportsQueuesAsyncWithHttpInfo($start_time, $end_time, $queues, $sla)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsQueuesAsyncWithHttpInfo
     *
     * Return statistics for queues
     *
     * @param  string $start_time ISO 8601 format (optional)
     * @param  string $end_time ISO 8601 format (optional)
     * @param  string[] $queues Queue names to filter (optional)
     * @param  float $sla SLA limit for hold time (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsQueuesAsyncWithHttpInfo($start_time = null, $end_time = null, $queues = null, $sla = '20')
    {
        $returnType = '\Voipex\Ipbx\Model\Model25';
        $request = $this->getReportsQueuesRequest($start_time, $end_time, $queues, $sla);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportsQueues'
     *
     * @param  string $start_time ISO 8601 format (optional)
     * @param  string $end_time ISO 8601 format (optional)
     * @param  string[] $queues Queue names to filter (optional)
     * @param  float $sla SLA limit for hold time (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportsQueuesRequest($start_time = null, $end_time = null, $queues = null, $sla = '20')
    {

        $resourcePath = '/reports/queues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time, null);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time, null);
        }
        // query params
        if (is_array($queues)) {
            $queues = ObjectSerializer::serializeCollection($queues, 'multi', true);
        }
        if ($queues !== null) {
            $queryParams['queues'] = ObjectSerializer::toQueryValue($queues, null);
        }
        // query params
        if ($sla !== null) {
            $queryParams['sla'] = ObjectSerializer::toQueryValue($sla, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
