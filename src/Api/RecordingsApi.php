<?php
/**
 * RecordingsApi
 * PHP version 8.1
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPBX API Documentation
 *
 * Access to all methods is granted through Bearer token.
 *
 * The version of the OpenAPI document: 1.98.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Voipex\Ipbx\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Voipex\Ipbx\ApiException;
use Voipex\Ipbx\Configuration;
use Voipex\Ipbx\HeaderSelector;
use Voipex\Ipbx\ObjectSerializer;

/**
 * RecordingsApi Class Doc Comment
 *
 * @package  Voipex\Ipbx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RecordingsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getRecordings' => [
            'application/json',
        ],
        'getRecordingsDownload' => [
            'application/json',
        ],
        'getRecordingsFilename' => [
            'application/json',
        ],
        'getRecordingsFilenameIpbxPbxid' => [
            'application/json',
        ],
        'postRecordingsBatchdelete' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getRecordings
     *
     * Get all recording names based on the input filter.
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  float|null $page page (optional, default to 1)
     * @param  float|null $page_size page_size (optional, default to 1000)
     * @param  string|null $pbx_id pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model13
     */
    public function getRecordings(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordings'][0]
    ): \Voipex\Ipbx\Model\Model13
    {
        list($response) = $this->getRecordingsWithHttpInfo($start_time, $end_time, $page, $page_size, $pbx_id, $contentType);
        return $response;
    }

    /**
     * Operation getRecordingsWithHttpInfo
     *
     * Get all recording names based on the input filter.
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size (optional, default to 1000)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model13, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordingsWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordings'][0]
    ): array
    {
        $request = $this->getRecordingsRequest($start_time, $end_time, $page, $page_size, $pbx_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model13', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model13' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model13', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model13';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model13',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordingsAsync
     *
     * Get all recording names based on the input filter.
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size (optional, default to 1000)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRecordingsAsync(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordings'][0]
    ): PromiseInterface
    {
        return $this->getRecordingsAsyncWithHttpInfo($start_time, $end_time, $page, $page_size, $pbx_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordingsAsyncWithHttpInfo
     *
     * Get all recording names based on the input filter.
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size (optional, default to 1000)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRecordingsAsyncWithHttpInfo(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordings'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model13';
        $request = $this->getRecordingsRequest($start_time, $end_time, $page, $page_size, $pbx_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordings'
     *
     * @param  \DateTime|null $start_time ISO 8601 format (optional)
     * @param  \DateTime|null $end_time ISO 8601 format (optional)
     * @param  float|null $page (optional, default to 1)
     * @param  float|null $page_size (optional, default to 1000)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRecordingsRequest(
        ?\DateTime $start_time = null,
        ?\DateTime $end_time = null,
        ?float $page = 1,
        ?float $page_size = 1000,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordings'][0]
    ): Request
    {




        if ($page_size !== null && $page_size > 1000) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling RecordingsApi.getRecordings, must be smaller than or equal to 1000.');
        }
        


        $resourcePath = '/recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecordingsDownload
     *
     * Download all recordings based on callId as a .zip archive
     *
     * @param  string[] $call_id Represents linkedid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsDownload'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function getRecordingsDownload(
        array $call_id,
        string $contentType = self::contentTypes['getRecordingsDownload'][0]
    ): string
    {
        list($response) = $this->getRecordingsDownloadWithHttpInfo($call_id, $contentType);
        return $response;
    }

    /**
     * Operation getRecordingsDownloadWithHttpInfo
     *
     * Download all recordings based on callId as a .zip archive
     *
     * @param  string[] $call_id Represents linkedid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsDownload'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordingsDownloadWithHttpInfo(
        array $call_id,
        string $contentType = self::contentTypes['getRecordingsDownload'][0]
    ): array
    {
        $request = $this->getRecordingsDownloadRequest($call_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                default:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordingsDownloadAsync
     *
     * Download all recordings based on callId as a .zip archive
     *
     * @param  string[] $call_id Represents linkedid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsDownload'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRecordingsDownloadAsync(
        array $call_id,
        string $contentType = self::contentTypes['getRecordingsDownload'][0]
    ): PromiseInterface
    {
        return $this->getRecordingsDownloadAsyncWithHttpInfo($call_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordingsDownloadAsyncWithHttpInfo
     *
     * Download all recordings based on callId as a .zip archive
     *
     * @param  string[] $call_id Represents linkedid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsDownload'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRecordingsDownloadAsyncWithHttpInfo(
        array $call_id,
        string $contentType = self::contentTypes['getRecordingsDownload'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->getRecordingsDownloadRequest($call_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordingsDownload'
     *
     * @param  string[] $call_id Represents linkedid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsDownload'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRecordingsDownloadRequest(
        array $call_id,
        string $contentType = self::contentTypes['getRecordingsDownload'][0]
    ): Request
    {

        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $call_id when calling getRecordingsDownload'
            );
        }
        if (count($call_id) > 50) {
            throw new InvalidArgumentException('invalid value for "$call_id" when calling RecordingsApi.getRecordingsDownload, number of items must be less than or equal to 50.');
        }
        

        $resourcePath = '/recordings/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $call_id,
            'callId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecordingsFilename
     *
     * Play recording specified by filename
     *
     * @param  string $filename filename (required)
     * @param  string|null $pbx_id pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilename'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function getRecordingsFilename(
        string $filename,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordingsFilename'][0]
    ): string
    {
        list($response) = $this->getRecordingsFilenameWithHttpInfo($filename, $pbx_id, $contentType);
        return $response;
    }

    /**
     * Operation getRecordingsFilenameWithHttpInfo
     *
     * Play recording specified by filename
     *
     * @param  string $filename (required)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilename'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordingsFilenameWithHttpInfo(
        string $filename,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordingsFilename'][0]
    ): array
    {
        $request = $this->getRecordingsFilenameRequest($filename, $pbx_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                default:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordingsFilenameAsync
     *
     * Play recording specified by filename
     *
     * @param  string $filename (required)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilename'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRecordingsFilenameAsync(
        string $filename,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordingsFilename'][0]
    ): PromiseInterface
    {
        return $this->getRecordingsFilenameAsyncWithHttpInfo($filename, $pbx_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordingsFilenameAsyncWithHttpInfo
     *
     * Play recording specified by filename
     *
     * @param  string $filename (required)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilename'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRecordingsFilenameAsyncWithHttpInfo(
        string $filename,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordingsFilename'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->getRecordingsFilenameRequest($filename, $pbx_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordingsFilename'
     *
     * @param  string $filename (required)
     * @param  string|null $pbx_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilename'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRecordingsFilenameRequest(
        string $filename,
        ?string $pbx_id = null,
        string $contentType = self::contentTypes['getRecordingsFilename'][0]
    ): Request
    {

        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $filename when calling getRecordingsFilename'
            );
        }



        $resourcePath = '/recordings/{filename}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($filename !== null) {
            $resourcePath = str_replace(
                '{' . 'filename' . '}',
                ObjectSerializer::toPathValue($filename),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecordingsFilenameIpbxPbxid
     *
     * @param  string $filename filename (required)
     * @param  string $pbx_id pbx_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilenameIpbxPbxid'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     * @deprecated
     */
    public function getRecordingsFilenameIpbxPbxid(
        string $filename,
        string $pbx_id,
        string $contentType = self::contentTypes['getRecordingsFilenameIpbxPbxid'][0]
    ): string
    {
        list($response) = $this->getRecordingsFilenameIpbxPbxidWithHttpInfo($filename, $pbx_id, $contentType);
        return $response;
    }

    /**
     * Operation getRecordingsFilenameIpbxPbxidWithHttpInfo
     *
     * @param  string $filename (required)
     * @param  string $pbx_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilenameIpbxPbxid'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getRecordingsFilenameIpbxPbxidWithHttpInfo(
        string $filename,
        string $pbx_id,
        string $contentType = self::contentTypes['getRecordingsFilenameIpbxPbxid'][0]
    ): array
    {
        $request = $this->getRecordingsFilenameIpbxPbxidRequest($filename, $pbx_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                default:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordingsFilenameIpbxPbxidAsync
     *
     * @param  string $filename (required)
     * @param  string $pbx_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilenameIpbxPbxid'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     * @deprecated
     */
    public function getRecordingsFilenameIpbxPbxidAsync(
        string $filename,
        string $pbx_id,
        string $contentType = self::contentTypes['getRecordingsFilenameIpbxPbxid'][0]
    ): PromiseInterface
    {
        return $this->getRecordingsFilenameIpbxPbxidAsyncWithHttpInfo($filename, $pbx_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordingsFilenameIpbxPbxidAsyncWithHttpInfo
     *
     * @param  string $filename (required)
     * @param  string $pbx_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilenameIpbxPbxid'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     * @deprecated
     */
    public function getRecordingsFilenameIpbxPbxidAsyncWithHttpInfo(
        string $filename,
        string $pbx_id,
        string $contentType = self::contentTypes['getRecordingsFilenameIpbxPbxid'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->getRecordingsFilenameIpbxPbxidRequest($filename, $pbx_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordingsFilenameIpbxPbxid'
     *
     * @param  string $filename (required)
     * @param  string $pbx_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecordingsFilenameIpbxPbxid'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getRecordingsFilenameIpbxPbxidRequest(
        string $filename,
        string $pbx_id,
        string $contentType = self::contentTypes['getRecordingsFilenameIpbxPbxid'][0]
    ): Request
    {

        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $filename when calling getRecordingsFilenameIpbxPbxid'
            );
        }

        // verify the required parameter 'pbx_id' is set
        if ($pbx_id === null || (is_array($pbx_id) && count($pbx_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pbx_id when calling getRecordingsFilenameIpbxPbxid'
            );
        }


        $resourcePath = '/recordings/{filename}/ipbx/{pbxId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($filename !== null) {
            $resourcePath = str_replace(
                '{' . 'filename' . '}',
                ObjectSerializer::toPathValue($filename),
                $resourcePath
            );
        }
        // path params
        if ($pbx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pbxId' . '}',
                ObjectSerializer::toPathValue($pbx_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRecordingsBatchdelete
     *
     * Batch delete recordings
     *
     * @param  float|null $pbx_id Optional pbxId (optional)
     * @param  \Voipex\Ipbx\Model\Model52|null $model52 model52 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRecordingsBatchdelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Voipex\Ipbx\Model\Model54
     */
    public function postRecordingsBatchdelete(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model52 $model52 = null,
        string $contentType = self::contentTypes['postRecordingsBatchdelete'][0]
    ): \Voipex\Ipbx\Model\Model54
    {
        list($response) = $this->postRecordingsBatchdeleteWithHttpInfo($pbx_id, $model52, $contentType);
        return $response;
    }

    /**
     * Operation postRecordingsBatchdeleteWithHttpInfo
     *
     * Batch delete recordings
     *
     * @param  float|null $pbx_id Optional pbxId (optional)
     * @param  \Voipex\Ipbx\Model\Model52|null $model52 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRecordingsBatchdelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Voipex\Ipbx\Model\Model54, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRecordingsBatchdeleteWithHttpInfo(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model52 $model52 = null,
        string $contentType = self::contentTypes['postRecordingsBatchdelete'][0]
    ): array
    {
        $request = $this->postRecordingsBatchdeleteRequest($pbx_id, $model52, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Voipex\Ipbx\Model\Model54', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Voipex\Ipbx\Model\Model54' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Voipex\Ipbx\Model\Model54', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Voipex\Ipbx\Model\Model54';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Voipex\Ipbx\Model\Model54',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRecordingsBatchdeleteAsync
     *
     * Batch delete recordings
     *
     * @param  float|null $pbx_id Optional pbxId (optional)
     * @param  \Voipex\Ipbx\Model\Model52|null $model52 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRecordingsBatchdelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postRecordingsBatchdeleteAsync(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model52 $model52 = null,
        string $contentType = self::contentTypes['postRecordingsBatchdelete'][0]
    ): PromiseInterface
    {
        return $this->postRecordingsBatchdeleteAsyncWithHttpInfo($pbx_id, $model52, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRecordingsBatchdeleteAsyncWithHttpInfo
     *
     * Batch delete recordings
     *
     * @param  float|null $pbx_id Optional pbxId (optional)
     * @param  \Voipex\Ipbx\Model\Model52|null $model52 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRecordingsBatchdelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postRecordingsBatchdeleteAsyncWithHttpInfo(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model52 $model52 = null,
        string $contentType = self::contentTypes['postRecordingsBatchdelete'][0]
    ): PromiseInterface
    {
        $returnType = '\Voipex\Ipbx\Model\Model54';
        $request = $this->postRecordingsBatchdeleteRequest($pbx_id, $model52, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRecordingsBatchdelete'
     *
     * @param  float|null $pbx_id Optional pbxId (optional)
     * @param  \Voipex\Ipbx\Model\Model52|null $model52 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRecordingsBatchdelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRecordingsBatchdeleteRequest(
        ?float $pbx_id = null,
        ?\Voipex\Ipbx\Model\Model52 $model52 = null,
        string $contentType = self::contentTypes['postRecordingsBatchdelete'][0]
    ): Request
    {




        $resourcePath = '/recordings/batch-delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pbx_id,
            'pbxId', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model52)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model52));
            } else {
                $httpBody = $model52;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
